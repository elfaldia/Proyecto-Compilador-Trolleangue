Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    DOT
    FLOAT

Grammar

Rule 0     S' -> statements
Rule 1     statements -> statements statement
Rule 2     statements -> statement
Rule 3     statement -> assignement
Rule 4     statement -> print
Rule 5     assignement -> NAME EQUALS expression_string SEMICOLON
Rule 6     assignement -> NAME INCREMENT SEMICOLON
Rule 7     assignement -> NAME DECREMENT SEMICOLON
Rule 8     expression_string -> expression
Rule 9     expression_string -> STRING
Rule 10    expression_string -> boolean
Rule 11    print -> PRINT L_PARENTHESIS expression_string R_PARENTHESIS SEMICOLON
Rule 12    expression -> L_PARENTHESIS expression R_PARENTHESIS
Rule 13    expression -> expression PLUS expression
Rule 14    expression -> expression MINUS expression
Rule 15    expression -> expression TIMES expression
Rule 16    expression -> expression DIVIDE expression
Rule 17    expression -> expression MODULO expression
Rule 18    expression -> term
Rule 19    term -> factor
Rule 20    term -> NAME
Rule 21    factor -> NUMBER
Rule 22    uminus -> MINUS NUMBER
Rule 23    factor -> uminus
Rule 24    assignement -> array
Rule 25    array -> NAME EQUALS L_BRACKET R_BRACKET SEMICOLON
Rule 26    array -> NAME EQUALS array_content SEMICOLON
Rule 27    array_content -> L_BRACKET elements R_BRACKET
Rule 28    elements -> element COMMA elements
Rule 29    elements -> element
Rule 30    element -> expression_string
Rule 31    element -> array_content
Rule 32    array_index -> L_BRACKET expression R_BRACKET
Rule 33    expression_string -> NAME array_index
Rule 34    expression_string -> NAME array_index array_index
Rule 35    assignement -> change_element_array
Rule 36    change_element_array -> NAME array_index EQUALS element SEMICOLON
Rule 37    change_element_array -> NAME array_index array_index EQUALS element SEMICOLON
Rule 38    boolean -> TRUE
Rule 39    boolean -> FALSE
Rule 40    booleans -> booleans AND boolean
Rule 41    booleans -> booleans OR boolean
Rule 42    booleans -> boolean
Rule 43    booleans -> L_PARENTHESIS booleans R_PARENTHESIS
Rule 44    boolean -> expression_string EQUAL expression_string
Rule 45    boolean -> expression_string NOT_EQUAL expression_string
Rule 46    boolean -> expression_string GREATER expression_string
Rule 47    boolean -> expression_string LESS expression_string
Rule 48    boolean -> expression_string GREATER_EQUAL expression_string
Rule 49    boolean -> expression_string LESS_EQUAL expression_string
Rule 50    else -> ELSE L_BRACE statements R_BRACE
Rule 51    elif -> ELIF L_PARENTHESIS booleans R_PARENTHESIS L_BRACE statements R_BRACE
Rule 52    elifs -> elifs elif
Rule 53    elifs -> elif
Rule 54    if -> IF L_PARENTHESIS booleans R_PARENTHESIS L_BRACE statements R_BRACE
Rule 55    statement -> if
Rule 56    statement -> if elifs
Rule 57    statement -> if elifs else
Rule 58    statement -> if else
Rule 59    statement -> loop_while
Rule 60    loop_while -> WHILE booleans L_BRACE statements R_BRACE
Rule 61    statement -> FOR L_PARENTHESIS NAME EQUALS expression TO expression COMMA STEP EQUALS expression R_PARENTHESIS L_BRACE statements R_BRACE
Rule 62    statement -> FOR L_PARENTHESIS NAME EQUALS expression TO expression R_PARENTHESIS L_BRACE statements R_BRACE
Rule 63    argument_list -> expression
Rule 64    argument_list -> argument_list COMMA expression
Rule 65    parameter -> NAME
Rule 66    parameter_list -> parameter
Rule 67    parameter_list -> parameter_list COMMA parameter
Rule 68    statement -> FUNCTION NAME L_BRACE statements R_BRACE
Rule 69    statement -> FUNCTION NAME L_BRACE statements return R_BRACE
Rule 70    statement -> FUNCTION NAME LESS parameter_list GREATER L_BRACE statements R_BRACE
Rule 71    statement -> FUNCTION NAME LESS parameter_list GREATER L_BRACE statements return R_BRACE
Rule 72    statement -> NAME L_PARENTHESIS argument_list R_PARENTHESIS SEMICOLON
Rule 73    statement -> NAME L_PARENTHESIS R_PARENTHESIS SEMICOLON
Rule 74    return -> RETURN L_PARENTHESIS expression R_PARENTHESIS SEMICOLON

Terminals, with rules where they appear

AND                  : 40
COMMA                : 28 61 64 67
COMMENT              : 
DECREMENT            : 7
DIVIDE               : 16
DOT                  : 
ELIF                 : 51
ELSE                 : 50
EQUAL                : 44
EQUALS               : 5 25 26 36 37 61 61 62
FALSE                : 39
FLOAT                : 
FOR                  : 61 62
FUNCTION             : 68 69 70 71
GREATER              : 46 70 71
GREATER_EQUAL        : 48
IF                   : 54
INCREMENT            : 6
LESS                 : 47 70 71
LESS_EQUAL           : 49
L_BRACE              : 50 51 54 60 61 62 68 69 70 71
L_BRACKET            : 25 27 32
L_PARENTHESIS        : 11 12 43 51 54 61 62 72 73 74
MINUS                : 14 22
MODULO               : 17
NAME                 : 5 6 7 20 25 26 33 34 36 37 61 62 65 68 69 70 71 72 73
NOT_EQUAL            : 45
NUMBER               : 21 22
OR                   : 41
PLUS                 : 13
PRINT                : 11
RETURN               : 74
R_BRACE              : 50 51 54 60 61 62 68 69 70 71
R_BRACKET            : 25 27 32
R_PARENTHESIS        : 11 12 43 51 54 61 62 72 73 74
SEMICOLON            : 5 6 7 11 25 26 36 37 72 73 74
STEP                 : 61
STRING               : 9
TIMES                : 15
TO                   : 61 62
TRUE                 : 38
WHILE                : 60
error                : 

Nonterminals, with rules where they appear

argument_list        : 64 72
array                : 24
array_content        : 26 31
array_index          : 33 34 34 36 37 37
assignement          : 3
boolean              : 10 40 41 42
booleans             : 40 41 43 51 54 60
change_element_array : 35
element              : 28 29 36 37
elements             : 27 28
elif                 : 52 53
elifs                : 52 56 57
else                 : 57 58
expression           : 8 12 13 13 14 14 15 15 16 16 17 17 32 61 61 61 62 62 63 64 74
expression_string    : 5 11 30 44 44 45 45 46 46 47 47 48 48 49 49
factor               : 19
if                   : 55 56 57 58
loop_while           : 59
parameter            : 66 67
parameter_list       : 67 70 71
print                : 4
return               : 69 71
statement            : 1 2
statements           : 1 50 51 54 60 61 62 68 69 70 71 0
term                 : 18
uminus               : 23

Parsing method: LALR

state 0

    (0) S' -> . statements
    (1) statements -> . statements statement
    (2) statements -> . statement
    (3) statement -> . assignement
    (4) statement -> . print
    (55) statement -> . if
    (56) statement -> . if elifs
    (57) statement -> . if elifs else
    (58) statement -> . if else
    (59) statement -> . loop_while
    (61) statement -> . FOR L_PARENTHESIS NAME EQUALS expression TO expression COMMA STEP EQUALS expression R_PARENTHESIS L_BRACE statements R_BRACE
    (62) statement -> . FOR L_PARENTHESIS NAME EQUALS expression TO expression R_PARENTHESIS L_BRACE statements R_BRACE
    (68) statement -> . FUNCTION NAME L_BRACE statements R_BRACE
    (69) statement -> . FUNCTION NAME L_BRACE statements return R_BRACE
    (70) statement -> . FUNCTION NAME LESS parameter_list GREATER L_BRACE statements R_BRACE
    (71) statement -> . FUNCTION NAME LESS parameter_list GREATER L_BRACE statements return R_BRACE
    (72) statement -> . NAME L_PARENTHESIS argument_list R_PARENTHESIS SEMICOLON
    (73) statement -> . NAME L_PARENTHESIS R_PARENTHESIS SEMICOLON
    (5) assignement -> . NAME EQUALS expression_string SEMICOLON
    (6) assignement -> . NAME INCREMENT SEMICOLON
    (7) assignement -> . NAME DECREMENT SEMICOLON
    (24) assignement -> . array
    (35) assignement -> . change_element_array
    (11) print -> . PRINT L_PARENTHESIS expression_string R_PARENTHESIS SEMICOLON
    (54) if -> . IF L_PARENTHESIS booleans R_PARENTHESIS L_BRACE statements R_BRACE
    (60) loop_while -> . WHILE booleans L_BRACE statements R_BRACE
    (25) array -> . NAME EQUALS L_BRACKET R_BRACKET SEMICOLON
    (26) array -> . NAME EQUALS array_content SEMICOLON
    (36) change_element_array -> . NAME array_index EQUALS element SEMICOLON
    (37) change_element_array -> . NAME array_index array_index EQUALS element SEMICOLON

    FOR             shift and go to state 7
    FUNCTION        shift and go to state 9
    NAME            shift and go to state 8
    PRINT           shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 14

    statements                     shift and go to state 1
    statement                      shift and go to state 2
    assignement                    shift and go to state 3
    print                          shift and go to state 4
    if                             shift and go to state 5
    loop_while                     shift and go to state 6
    array                          shift and go to state 10
    change_element_array           shift and go to state 11

state 1

    (0) S' -> statements .
    (1) statements -> statements . statement
    (3) statement -> . assignement
    (4) statement -> . print
    (55) statement -> . if
    (56) statement -> . if elifs
    (57) statement -> . if elifs else
    (58) statement -> . if else
    (59) statement -> . loop_while
    (61) statement -> . FOR L_PARENTHESIS NAME EQUALS expression TO expression COMMA STEP EQUALS expression R_PARENTHESIS L_BRACE statements R_BRACE
    (62) statement -> . FOR L_PARENTHESIS NAME EQUALS expression TO expression R_PARENTHESIS L_BRACE statements R_BRACE
    (68) statement -> . FUNCTION NAME L_BRACE statements R_BRACE
    (69) statement -> . FUNCTION NAME L_BRACE statements return R_BRACE
    (70) statement -> . FUNCTION NAME LESS parameter_list GREATER L_BRACE statements R_BRACE
    (71) statement -> . FUNCTION NAME LESS parameter_list GREATER L_BRACE statements return R_BRACE
    (72) statement -> . NAME L_PARENTHESIS argument_list R_PARENTHESIS SEMICOLON
    (73) statement -> . NAME L_PARENTHESIS R_PARENTHESIS SEMICOLON
    (5) assignement -> . NAME EQUALS expression_string SEMICOLON
    (6) assignement -> . NAME INCREMENT SEMICOLON
    (7) assignement -> . NAME DECREMENT SEMICOLON
    (24) assignement -> . array
    (35) assignement -> . change_element_array
    (11) print -> . PRINT L_PARENTHESIS expression_string R_PARENTHESIS SEMICOLON
    (54) if -> . IF L_PARENTHESIS booleans R_PARENTHESIS L_BRACE statements R_BRACE
    (60) loop_while -> . WHILE booleans L_BRACE statements R_BRACE
    (25) array -> . NAME EQUALS L_BRACKET R_BRACKET SEMICOLON
    (26) array -> . NAME EQUALS array_content SEMICOLON
    (36) change_element_array -> . NAME array_index EQUALS element SEMICOLON
    (37) change_element_array -> . NAME array_index array_index EQUALS element SEMICOLON

    FOR             shift and go to state 7
    FUNCTION        shift and go to state 9
    NAME            shift and go to state 8
    PRINT           shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 14

    statement                      shift and go to state 15
    assignement                    shift and go to state 3
    print                          shift and go to state 4
    if                             shift and go to state 5
    loop_while                     shift and go to state 6
    array                          shift and go to state 10
    change_element_array           shift and go to state 11

state 2

    (2) statements -> statement .

    FOR             reduce using rule 2 (statements -> statement .)
    FUNCTION        reduce using rule 2 (statements -> statement .)
    NAME            reduce using rule 2 (statements -> statement .)
    PRINT           reduce using rule 2 (statements -> statement .)
    IF              reduce using rule 2 (statements -> statement .)
    WHILE           reduce using rule 2 (statements -> statement .)
    $end            reduce using rule 2 (statements -> statement .)
    R_BRACE         reduce using rule 2 (statements -> statement .)
    RETURN          reduce using rule 2 (statements -> statement .)


state 3

    (3) statement -> assignement .

    FOR             reduce using rule 3 (statement -> assignement .)
    FUNCTION        reduce using rule 3 (statement -> assignement .)
    NAME            reduce using rule 3 (statement -> assignement .)
    PRINT           reduce using rule 3 (statement -> assignement .)
    IF              reduce using rule 3 (statement -> assignement .)
    WHILE           reduce using rule 3 (statement -> assignement .)
    $end            reduce using rule 3 (statement -> assignement .)
    R_BRACE         reduce using rule 3 (statement -> assignement .)
    RETURN          reduce using rule 3 (statement -> assignement .)


state 4

    (4) statement -> print .

    FOR             reduce using rule 4 (statement -> print .)
    FUNCTION        reduce using rule 4 (statement -> print .)
    NAME            reduce using rule 4 (statement -> print .)
    PRINT           reduce using rule 4 (statement -> print .)
    IF              reduce using rule 4 (statement -> print .)
    WHILE           reduce using rule 4 (statement -> print .)
    $end            reduce using rule 4 (statement -> print .)
    R_BRACE         reduce using rule 4 (statement -> print .)
    RETURN          reduce using rule 4 (statement -> print .)


state 5

    (55) statement -> if .
    (56) statement -> if . elifs
    (57) statement -> if . elifs else
    (58) statement -> if . else
    (52) elifs -> . elifs elif
    (53) elifs -> . elif
    (50) else -> . ELSE L_BRACE statements R_BRACE
    (51) elif -> . ELIF L_PARENTHESIS booleans R_PARENTHESIS L_BRACE statements R_BRACE

    FOR             reduce using rule 55 (statement -> if .)
    FUNCTION        reduce using rule 55 (statement -> if .)
    NAME            reduce using rule 55 (statement -> if .)
    PRINT           reduce using rule 55 (statement -> if .)
    IF              reduce using rule 55 (statement -> if .)
    WHILE           reduce using rule 55 (statement -> if .)
    $end            reduce using rule 55 (statement -> if .)
    R_BRACE         reduce using rule 55 (statement -> if .)
    RETURN          reduce using rule 55 (statement -> if .)
    ELSE            shift and go to state 19
    ELIF            shift and go to state 20

    elifs                          shift and go to state 16
    else                           shift and go to state 17
    elif                           shift and go to state 18

state 6

    (59) statement -> loop_while .

    FOR             reduce using rule 59 (statement -> loop_while .)
    FUNCTION        reduce using rule 59 (statement -> loop_while .)
    NAME            reduce using rule 59 (statement -> loop_while .)
    PRINT           reduce using rule 59 (statement -> loop_while .)
    IF              reduce using rule 59 (statement -> loop_while .)
    WHILE           reduce using rule 59 (statement -> loop_while .)
    $end            reduce using rule 59 (statement -> loop_while .)
    R_BRACE         reduce using rule 59 (statement -> loop_while .)
    RETURN          reduce using rule 59 (statement -> loop_while .)


state 7

    (61) statement -> FOR . L_PARENTHESIS NAME EQUALS expression TO expression COMMA STEP EQUALS expression R_PARENTHESIS L_BRACE statements R_BRACE
    (62) statement -> FOR . L_PARENTHESIS NAME EQUALS expression TO expression R_PARENTHESIS L_BRACE statements R_BRACE

    L_PARENTHESIS   shift and go to state 21


state 8

    (72) statement -> NAME . L_PARENTHESIS argument_list R_PARENTHESIS SEMICOLON
    (73) statement -> NAME . L_PARENTHESIS R_PARENTHESIS SEMICOLON
    (5) assignement -> NAME . EQUALS expression_string SEMICOLON
    (6) assignement -> NAME . INCREMENT SEMICOLON
    (7) assignement -> NAME . DECREMENT SEMICOLON
    (25) array -> NAME . EQUALS L_BRACKET R_BRACKET SEMICOLON
    (26) array -> NAME . EQUALS array_content SEMICOLON
    (36) change_element_array -> NAME . array_index EQUALS element SEMICOLON
    (37) change_element_array -> NAME . array_index array_index EQUALS element SEMICOLON
    (32) array_index -> . L_BRACKET expression R_BRACKET

    L_PARENTHESIS   shift and go to state 22
    EQUALS          shift and go to state 23
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 25
    L_BRACKET       shift and go to state 26

    array_index                    shift and go to state 27

state 9

    (68) statement -> FUNCTION . NAME L_BRACE statements R_BRACE
    (69) statement -> FUNCTION . NAME L_BRACE statements return R_BRACE
    (70) statement -> FUNCTION . NAME LESS parameter_list GREATER L_BRACE statements R_BRACE
    (71) statement -> FUNCTION . NAME LESS parameter_list GREATER L_BRACE statements return R_BRACE

    NAME            shift and go to state 28


state 10

    (24) assignement -> array .

    FOR             reduce using rule 24 (assignement -> array .)
    FUNCTION        reduce using rule 24 (assignement -> array .)
    NAME            reduce using rule 24 (assignement -> array .)
    PRINT           reduce using rule 24 (assignement -> array .)
    IF              reduce using rule 24 (assignement -> array .)
    WHILE           reduce using rule 24 (assignement -> array .)
    $end            reduce using rule 24 (assignement -> array .)
    R_BRACE         reduce using rule 24 (assignement -> array .)
    RETURN          reduce using rule 24 (assignement -> array .)


state 11

    (35) assignement -> change_element_array .

    FOR             reduce using rule 35 (assignement -> change_element_array .)
    FUNCTION        reduce using rule 35 (assignement -> change_element_array .)
    NAME            reduce using rule 35 (assignement -> change_element_array .)
    PRINT           reduce using rule 35 (assignement -> change_element_array .)
    IF              reduce using rule 35 (assignement -> change_element_array .)
    WHILE           reduce using rule 35 (assignement -> change_element_array .)
    $end            reduce using rule 35 (assignement -> change_element_array .)
    R_BRACE         reduce using rule 35 (assignement -> change_element_array .)
    RETURN          reduce using rule 35 (assignement -> change_element_array .)


state 12

    (11) print -> PRINT . L_PARENTHESIS expression_string R_PARENTHESIS SEMICOLON

    L_PARENTHESIS   shift and go to state 29


state 13

    (54) if -> IF . L_PARENTHESIS booleans R_PARENTHESIS L_BRACE statements R_BRACE

    L_PARENTHESIS   shift and go to state 30


state 14

    (60) loop_while -> WHILE . booleans L_BRACE statements R_BRACE
    (40) booleans -> . booleans AND boolean
    (41) booleans -> . booleans OR boolean
    (42) booleans -> . boolean
    (43) booleans -> . L_PARENTHESIS booleans R_PARENTHESIS
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (44) boolean -> . expression_string EQUAL expression_string
    (45) boolean -> . expression_string NOT_EQUAL expression_string
    (46) boolean -> . expression_string GREATER expression_string
    (47) boolean -> . expression_string LESS expression_string
    (48) boolean -> . expression_string GREATER_EQUAL expression_string
    (49) boolean -> . expression_string LESS_EQUAL expression_string
    (8) expression_string -> . expression
    (9) expression_string -> . STRING
    (10) expression_string -> . boolean
    (33) expression_string -> . NAME array_index
    (34) expression_string -> . NAME array_index array_index
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression TIMES expression
    (16) expression -> . expression DIVIDE expression
    (17) expression -> . expression MODULO expression
    (18) expression -> . term
    (19) term -> . factor
    (20) term -> . NAME
    (21) factor -> . NUMBER
    (23) factor -> . uminus
    (22) uminus -> . MINUS NUMBER

    L_PARENTHESIS   shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    STRING          shift and go to state 38
    NAME            shift and go to state 39
    NUMBER          shift and go to state 43
    MINUS           shift and go to state 40

    booleans                       shift and go to state 31
    boolean                        shift and go to state 32
    expression_string              shift and go to state 36
    expression                     shift and go to state 37
    term                           shift and go to state 41
    factor                         shift and go to state 42
    uminus                         shift and go to state 44

state 15

    (1) statements -> statements statement .

    FOR             reduce using rule 1 (statements -> statements statement .)
    FUNCTION        reduce using rule 1 (statements -> statements statement .)
    NAME            reduce using rule 1 (statements -> statements statement .)
    PRINT           reduce using rule 1 (statements -> statements statement .)
    IF              reduce using rule 1 (statements -> statements statement .)
    WHILE           reduce using rule 1 (statements -> statements statement .)
    $end            reduce using rule 1 (statements -> statements statement .)
    R_BRACE         reduce using rule 1 (statements -> statements statement .)
    RETURN          reduce using rule 1 (statements -> statements statement .)


state 16

    (56) statement -> if elifs .
    (57) statement -> if elifs . else
    (52) elifs -> elifs . elif
    (50) else -> . ELSE L_BRACE statements R_BRACE
    (51) elif -> . ELIF L_PARENTHESIS booleans R_PARENTHESIS L_BRACE statements R_BRACE

    FOR             reduce using rule 56 (statement -> if elifs .)
    FUNCTION        reduce using rule 56 (statement -> if elifs .)
    NAME            reduce using rule 56 (statement -> if elifs .)
    PRINT           reduce using rule 56 (statement -> if elifs .)
    IF              reduce using rule 56 (statement -> if elifs .)
    WHILE           reduce using rule 56 (statement -> if elifs .)
    $end            reduce using rule 56 (statement -> if elifs .)
    R_BRACE         reduce using rule 56 (statement -> if elifs .)
    RETURN          reduce using rule 56 (statement -> if elifs .)
    ELSE            shift and go to state 19
    ELIF            shift and go to state 20

    else                           shift and go to state 45
    elif                           shift and go to state 46

state 17

    (58) statement -> if else .

    FOR             reduce using rule 58 (statement -> if else .)
    FUNCTION        reduce using rule 58 (statement -> if else .)
    NAME            reduce using rule 58 (statement -> if else .)
    PRINT           reduce using rule 58 (statement -> if else .)
    IF              reduce using rule 58 (statement -> if else .)
    WHILE           reduce using rule 58 (statement -> if else .)
    $end            reduce using rule 58 (statement -> if else .)
    R_BRACE         reduce using rule 58 (statement -> if else .)
    RETURN          reduce using rule 58 (statement -> if else .)


state 18

    (53) elifs -> elif .

    ELSE            reduce using rule 53 (elifs -> elif .)
    ELIF            reduce using rule 53 (elifs -> elif .)
    FOR             reduce using rule 53 (elifs -> elif .)
    FUNCTION        reduce using rule 53 (elifs -> elif .)
    NAME            reduce using rule 53 (elifs -> elif .)
    PRINT           reduce using rule 53 (elifs -> elif .)
    IF              reduce using rule 53 (elifs -> elif .)
    WHILE           reduce using rule 53 (elifs -> elif .)
    $end            reduce using rule 53 (elifs -> elif .)
    R_BRACE         reduce using rule 53 (elifs -> elif .)
    RETURN          reduce using rule 53 (elifs -> elif .)


state 19

    (50) else -> ELSE . L_BRACE statements R_BRACE

    L_BRACE         shift and go to state 47


state 20

    (51) elif -> ELIF . L_PARENTHESIS booleans R_PARENTHESIS L_BRACE statements R_BRACE

    L_PARENTHESIS   shift and go to state 48


state 21

    (61) statement -> FOR L_PARENTHESIS . NAME EQUALS expression TO expression COMMA STEP EQUALS expression R_PARENTHESIS L_BRACE statements R_BRACE
    (62) statement -> FOR L_PARENTHESIS . NAME EQUALS expression TO expression R_PARENTHESIS L_BRACE statements R_BRACE

    NAME            shift and go to state 49


state 22

    (72) statement -> NAME L_PARENTHESIS . argument_list R_PARENTHESIS SEMICOLON
    (73) statement -> NAME L_PARENTHESIS . R_PARENTHESIS SEMICOLON
    (63) argument_list -> . expression
    (64) argument_list -> . argument_list COMMA expression
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression TIMES expression
    (16) expression -> . expression DIVIDE expression
    (17) expression -> . expression MODULO expression
    (18) expression -> . term
    (19) term -> . factor
    (20) term -> . NAME
    (21) factor -> . NUMBER
    (23) factor -> . uminus
    (22) uminus -> . MINUS NUMBER

    R_PARENTHESIS   shift and go to state 53
    L_PARENTHESIS   shift and go to state 51
    NAME            shift and go to state 50
    NUMBER          shift and go to state 43
    MINUS           shift and go to state 40

    argument_list                  shift and go to state 52
    expression                     shift and go to state 54
    term                           shift and go to state 41
    factor                         shift and go to state 42
    uminus                         shift and go to state 44

state 23

    (5) assignement -> NAME EQUALS . expression_string SEMICOLON
    (25) array -> NAME EQUALS . L_BRACKET R_BRACKET SEMICOLON
    (26) array -> NAME EQUALS . array_content SEMICOLON
    (8) expression_string -> . expression
    (9) expression_string -> . STRING
    (10) expression_string -> . boolean
    (33) expression_string -> . NAME array_index
    (34) expression_string -> . NAME array_index array_index
    (27) array_content -> . L_BRACKET elements R_BRACKET
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression TIMES expression
    (16) expression -> . expression DIVIDE expression
    (17) expression -> . expression MODULO expression
    (18) expression -> . term
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (44) boolean -> . expression_string EQUAL expression_string
    (45) boolean -> . expression_string NOT_EQUAL expression_string
    (46) boolean -> . expression_string GREATER expression_string
    (47) boolean -> . expression_string LESS expression_string
    (48) boolean -> . expression_string GREATER_EQUAL expression_string
    (49) boolean -> . expression_string LESS_EQUAL expression_string
    (19) term -> . factor
    (20) term -> . NAME
    (21) factor -> . NUMBER
    (23) factor -> . uminus
    (22) uminus -> . MINUS NUMBER

    L_BRACKET       shift and go to state 56
    STRING          shift and go to state 38
    NAME            shift and go to state 39
    L_PARENTHESIS   shift and go to state 51
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    NUMBER          shift and go to state 43
    MINUS           shift and go to state 40

    expression_string              shift and go to state 55
    array_content                  shift and go to state 57
    expression                     shift and go to state 37
    boolean                        shift and go to state 58
    term                           shift and go to state 41
    factor                         shift and go to state 42
    uminus                         shift and go to state 44

state 24

    (6) assignement -> NAME INCREMENT . SEMICOLON

    SEMICOLON       shift and go to state 59


state 25

    (7) assignement -> NAME DECREMENT . SEMICOLON

    SEMICOLON       shift and go to state 60


state 26

    (32) array_index -> L_BRACKET . expression R_BRACKET
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression TIMES expression
    (16) expression -> . expression DIVIDE expression
    (17) expression -> . expression MODULO expression
    (18) expression -> . term
    (19) term -> . factor
    (20) term -> . NAME
    (21) factor -> . NUMBER
    (23) factor -> . uminus
    (22) uminus -> . MINUS NUMBER

    L_PARENTHESIS   shift and go to state 51
    NAME            shift and go to state 50
    NUMBER          shift and go to state 43
    MINUS           shift and go to state 40

    expression                     shift and go to state 61
    term                           shift and go to state 41
    factor                         shift and go to state 42
    uminus                         shift and go to state 44

state 27

    (36) change_element_array -> NAME array_index . EQUALS element SEMICOLON
    (37) change_element_array -> NAME array_index . array_index EQUALS element SEMICOLON
    (32) array_index -> . L_BRACKET expression R_BRACKET

    EQUALS          shift and go to state 63
    L_BRACKET       shift and go to state 26

    array_index                    shift and go to state 62

state 28

    (68) statement -> FUNCTION NAME . L_BRACE statements R_BRACE
    (69) statement -> FUNCTION NAME . L_BRACE statements return R_BRACE
    (70) statement -> FUNCTION NAME . LESS parameter_list GREATER L_BRACE statements R_BRACE
    (71) statement -> FUNCTION NAME . LESS parameter_list GREATER L_BRACE statements return R_BRACE

    L_BRACE         shift and go to state 64
    LESS            shift and go to state 65


state 29

    (11) print -> PRINT L_PARENTHESIS . expression_string R_PARENTHESIS SEMICOLON
    (8) expression_string -> . expression
    (9) expression_string -> . STRING
    (10) expression_string -> . boolean
    (33) expression_string -> . NAME array_index
    (34) expression_string -> . NAME array_index array_index
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression TIMES expression
    (16) expression -> . expression DIVIDE expression
    (17) expression -> . expression MODULO expression
    (18) expression -> . term
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (44) boolean -> . expression_string EQUAL expression_string
    (45) boolean -> . expression_string NOT_EQUAL expression_string
    (46) boolean -> . expression_string GREATER expression_string
    (47) boolean -> . expression_string LESS expression_string
    (48) boolean -> . expression_string GREATER_EQUAL expression_string
    (49) boolean -> . expression_string LESS_EQUAL expression_string
    (19) term -> . factor
    (20) term -> . NAME
    (21) factor -> . NUMBER
    (23) factor -> . uminus
    (22) uminus -> . MINUS NUMBER

    STRING          shift and go to state 38
    NAME            shift and go to state 39
    L_PARENTHESIS   shift and go to state 51
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    NUMBER          shift and go to state 43
    MINUS           shift and go to state 40

    expression_string              shift and go to state 66
    expression                     shift and go to state 37
    boolean                        shift and go to state 58
    term                           shift and go to state 41
    factor                         shift and go to state 42
    uminus                         shift and go to state 44

state 30

    (54) if -> IF L_PARENTHESIS . booleans R_PARENTHESIS L_BRACE statements R_BRACE
    (40) booleans -> . booleans AND boolean
    (41) booleans -> . booleans OR boolean
    (42) booleans -> . boolean
    (43) booleans -> . L_PARENTHESIS booleans R_PARENTHESIS
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (44) boolean -> . expression_string EQUAL expression_string
    (45) boolean -> . expression_string NOT_EQUAL expression_string
    (46) boolean -> . expression_string GREATER expression_string
    (47) boolean -> . expression_string LESS expression_string
    (48) boolean -> . expression_string GREATER_EQUAL expression_string
    (49) boolean -> . expression_string LESS_EQUAL expression_string
    (8) expression_string -> . expression
    (9) expression_string -> . STRING
    (10) expression_string -> . boolean
    (33) expression_string -> . NAME array_index
    (34) expression_string -> . NAME array_index array_index
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression TIMES expression
    (16) expression -> . expression DIVIDE expression
    (17) expression -> . expression MODULO expression
    (18) expression -> . term
    (19) term -> . factor
    (20) term -> . NAME
    (21) factor -> . NUMBER
    (23) factor -> . uminus
    (22) uminus -> . MINUS NUMBER

    L_PARENTHESIS   shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    STRING          shift and go to state 38
    NAME            shift and go to state 39
    NUMBER          shift and go to state 43
    MINUS           shift and go to state 40

    booleans                       shift and go to state 67
    boolean                        shift and go to state 32
    expression_string              shift and go to state 36
    expression                     shift and go to state 37
    term                           shift and go to state 41
    factor                         shift and go to state 42
    uminus                         shift and go to state 44

state 31

    (60) loop_while -> WHILE booleans . L_BRACE statements R_BRACE
    (40) booleans -> booleans . AND boolean
    (41) booleans -> booleans . OR boolean

    L_BRACE         shift and go to state 68
    AND             shift and go to state 69
    OR              shift and go to state 70


state 32

    (42) booleans -> boolean .
    (10) expression_string -> boolean .

    L_BRACE         reduce using rule 42 (booleans -> boolean .)
    AND             reduce using rule 42 (booleans -> boolean .)
    OR              reduce using rule 42 (booleans -> boolean .)
    R_PARENTHESIS   reduce using rule 42 (booleans -> boolean .)
    EQUAL           reduce using rule 10 (expression_string -> boolean .)
    NOT_EQUAL       reduce using rule 10 (expression_string -> boolean .)
    GREATER         reduce using rule 10 (expression_string -> boolean .)
    LESS            reduce using rule 10 (expression_string -> boolean .)
    GREATER_EQUAL   reduce using rule 10 (expression_string -> boolean .)
    LESS_EQUAL      reduce using rule 10 (expression_string -> boolean .)


state 33

    (43) booleans -> L_PARENTHESIS . booleans R_PARENTHESIS
    (12) expression -> L_PARENTHESIS . expression R_PARENTHESIS
    (40) booleans -> . booleans AND boolean
    (41) booleans -> . booleans OR boolean
    (42) booleans -> . boolean
    (43) booleans -> . L_PARENTHESIS booleans R_PARENTHESIS
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression TIMES expression
    (16) expression -> . expression DIVIDE expression
    (17) expression -> . expression MODULO expression
    (18) expression -> . term
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (44) boolean -> . expression_string EQUAL expression_string
    (45) boolean -> . expression_string NOT_EQUAL expression_string
    (46) boolean -> . expression_string GREATER expression_string
    (47) boolean -> . expression_string LESS expression_string
    (48) boolean -> . expression_string GREATER_EQUAL expression_string
    (49) boolean -> . expression_string LESS_EQUAL expression_string
    (19) term -> . factor
    (20) term -> . NAME
    (8) expression_string -> . expression
    (9) expression_string -> . STRING
    (10) expression_string -> . boolean
    (33) expression_string -> . NAME array_index
    (34) expression_string -> . NAME array_index array_index
    (21) factor -> . NUMBER
    (23) factor -> . uminus
    (22) uminus -> . MINUS NUMBER

    L_PARENTHESIS   shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    NAME            shift and go to state 73
    STRING          shift and go to state 38
    NUMBER          shift and go to state 43
    MINUS           shift and go to state 40

    booleans                       shift and go to state 71
    expression                     shift and go to state 72
    boolean                        shift and go to state 32
    term                           shift and go to state 41
    expression_string              shift and go to state 36
    factor                         shift and go to state 42
    uminus                         shift and go to state 44

state 34

    (38) boolean -> TRUE .

    L_BRACE         reduce using rule 38 (boolean -> TRUE .)
    AND             reduce using rule 38 (boolean -> TRUE .)
    OR              reduce using rule 38 (boolean -> TRUE .)
    EQUAL           reduce using rule 38 (boolean -> TRUE .)
    NOT_EQUAL       reduce using rule 38 (boolean -> TRUE .)
    GREATER         reduce using rule 38 (boolean -> TRUE .)
    LESS            reduce using rule 38 (boolean -> TRUE .)
    GREATER_EQUAL   reduce using rule 38 (boolean -> TRUE .)
    LESS_EQUAL      reduce using rule 38 (boolean -> TRUE .)
    SEMICOLON       reduce using rule 38 (boolean -> TRUE .)
    R_PARENTHESIS   reduce using rule 38 (boolean -> TRUE .)
    COMMA           reduce using rule 38 (boolean -> TRUE .)
    R_BRACKET       reduce using rule 38 (boolean -> TRUE .)


state 35

    (39) boolean -> FALSE .

    L_BRACE         reduce using rule 39 (boolean -> FALSE .)
    AND             reduce using rule 39 (boolean -> FALSE .)
    OR              reduce using rule 39 (boolean -> FALSE .)
    EQUAL           reduce using rule 39 (boolean -> FALSE .)
    NOT_EQUAL       reduce using rule 39 (boolean -> FALSE .)
    GREATER         reduce using rule 39 (boolean -> FALSE .)
    LESS            reduce using rule 39 (boolean -> FALSE .)
    GREATER_EQUAL   reduce using rule 39 (boolean -> FALSE .)
    LESS_EQUAL      reduce using rule 39 (boolean -> FALSE .)
    SEMICOLON       reduce using rule 39 (boolean -> FALSE .)
    R_PARENTHESIS   reduce using rule 39 (boolean -> FALSE .)
    COMMA           reduce using rule 39 (boolean -> FALSE .)
    R_BRACKET       reduce using rule 39 (boolean -> FALSE .)


state 36

    (44) boolean -> expression_string . EQUAL expression_string
    (45) boolean -> expression_string . NOT_EQUAL expression_string
    (46) boolean -> expression_string . GREATER expression_string
    (47) boolean -> expression_string . LESS expression_string
    (48) boolean -> expression_string . GREATER_EQUAL expression_string
    (49) boolean -> expression_string . LESS_EQUAL expression_string

    EQUAL           shift and go to state 74
    NOT_EQUAL       shift and go to state 75
    GREATER         shift and go to state 76
    LESS            shift and go to state 77
    GREATER_EQUAL   shift and go to state 78
    LESS_EQUAL      shift and go to state 79


state 37

    (8) expression_string -> expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . TIMES expression
    (16) expression -> expression . DIVIDE expression
    (17) expression -> expression . MODULO expression

    EQUAL           reduce using rule 8 (expression_string -> expression .)
    NOT_EQUAL       reduce using rule 8 (expression_string -> expression .)
    GREATER         reduce using rule 8 (expression_string -> expression .)
    LESS            reduce using rule 8 (expression_string -> expression .)
    GREATER_EQUAL   reduce using rule 8 (expression_string -> expression .)
    LESS_EQUAL      reduce using rule 8 (expression_string -> expression .)
    SEMICOLON       reduce using rule 8 (expression_string -> expression .)
    R_PARENTHESIS   reduce using rule 8 (expression_string -> expression .)
    COMMA           reduce using rule 8 (expression_string -> expression .)
    R_BRACKET       reduce using rule 8 (expression_string -> expression .)
    L_BRACE         reduce using rule 8 (expression_string -> expression .)
    AND             reduce using rule 8 (expression_string -> expression .)
    OR              reduce using rule 8 (expression_string -> expression .)
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    TIMES           shift and go to state 82
    DIVIDE          shift and go to state 83
    MODULO          shift and go to state 84


state 38

    (9) expression_string -> STRING .

    EQUAL           reduce using rule 9 (expression_string -> STRING .)
    NOT_EQUAL       reduce using rule 9 (expression_string -> STRING .)
    GREATER         reduce using rule 9 (expression_string -> STRING .)
    LESS            reduce using rule 9 (expression_string -> STRING .)
    GREATER_EQUAL   reduce using rule 9 (expression_string -> STRING .)
    LESS_EQUAL      reduce using rule 9 (expression_string -> STRING .)
    SEMICOLON       reduce using rule 9 (expression_string -> STRING .)
    R_PARENTHESIS   reduce using rule 9 (expression_string -> STRING .)
    COMMA           reduce using rule 9 (expression_string -> STRING .)
    R_BRACKET       reduce using rule 9 (expression_string -> STRING .)
    L_BRACE         reduce using rule 9 (expression_string -> STRING .)
    AND             reduce using rule 9 (expression_string -> STRING .)
    OR              reduce using rule 9 (expression_string -> STRING .)


state 39

    (33) expression_string -> NAME . array_index
    (34) expression_string -> NAME . array_index array_index
    (20) term -> NAME .
    (32) array_index -> . L_BRACKET expression R_BRACKET

    PLUS            reduce using rule 20 (term -> NAME .)
    MINUS           reduce using rule 20 (term -> NAME .)
    TIMES           reduce using rule 20 (term -> NAME .)
    DIVIDE          reduce using rule 20 (term -> NAME .)
    MODULO          reduce using rule 20 (term -> NAME .)
    EQUAL           reduce using rule 20 (term -> NAME .)
    NOT_EQUAL       reduce using rule 20 (term -> NAME .)
    GREATER         reduce using rule 20 (term -> NAME .)
    LESS            reduce using rule 20 (term -> NAME .)
    GREATER_EQUAL   reduce using rule 20 (term -> NAME .)
    LESS_EQUAL      reduce using rule 20 (term -> NAME .)
    SEMICOLON       reduce using rule 20 (term -> NAME .)
    R_PARENTHESIS   reduce using rule 20 (term -> NAME .)
    COMMA           reduce using rule 20 (term -> NAME .)
    R_BRACKET       reduce using rule 20 (term -> NAME .)
    L_BRACE         reduce using rule 20 (term -> NAME .)
    AND             reduce using rule 20 (term -> NAME .)
    OR              reduce using rule 20 (term -> NAME .)
    L_BRACKET       shift and go to state 26

    array_index                    shift and go to state 85

state 40

    (22) uminus -> MINUS . NUMBER

    NUMBER          shift and go to state 86


state 41

    (18) expression -> term .

    PLUS            reduce using rule 18 (expression -> term .)
    MINUS           reduce using rule 18 (expression -> term .)
    TIMES           reduce using rule 18 (expression -> term .)
    DIVIDE          reduce using rule 18 (expression -> term .)
    MODULO          reduce using rule 18 (expression -> term .)
    EQUAL           reduce using rule 18 (expression -> term .)
    NOT_EQUAL       reduce using rule 18 (expression -> term .)
    GREATER         reduce using rule 18 (expression -> term .)
    LESS            reduce using rule 18 (expression -> term .)
    GREATER_EQUAL   reduce using rule 18 (expression -> term .)
    LESS_EQUAL      reduce using rule 18 (expression -> term .)
    R_PARENTHESIS   reduce using rule 18 (expression -> term .)
    COMMA           reduce using rule 18 (expression -> term .)
    SEMICOLON       reduce using rule 18 (expression -> term .)
    R_BRACKET       reduce using rule 18 (expression -> term .)
    L_BRACE         reduce using rule 18 (expression -> term .)
    AND             reduce using rule 18 (expression -> term .)
    OR              reduce using rule 18 (expression -> term .)
    TO              reduce using rule 18 (expression -> term .)


state 42

    (19) term -> factor .

    PLUS            reduce using rule 19 (term -> factor .)
    MINUS           reduce using rule 19 (term -> factor .)
    TIMES           reduce using rule 19 (term -> factor .)
    DIVIDE          reduce using rule 19 (term -> factor .)
    MODULO          reduce using rule 19 (term -> factor .)
    EQUAL           reduce using rule 19 (term -> factor .)
    NOT_EQUAL       reduce using rule 19 (term -> factor .)
    GREATER         reduce using rule 19 (term -> factor .)
    LESS            reduce using rule 19 (term -> factor .)
    GREATER_EQUAL   reduce using rule 19 (term -> factor .)
    LESS_EQUAL      reduce using rule 19 (term -> factor .)
    R_PARENTHESIS   reduce using rule 19 (term -> factor .)
    COMMA           reduce using rule 19 (term -> factor .)
    SEMICOLON       reduce using rule 19 (term -> factor .)
    R_BRACKET       reduce using rule 19 (term -> factor .)
    L_BRACE         reduce using rule 19 (term -> factor .)
    AND             reduce using rule 19 (term -> factor .)
    OR              reduce using rule 19 (term -> factor .)
    TO              reduce using rule 19 (term -> factor .)


state 43

    (21) factor -> NUMBER .

    PLUS            reduce using rule 21 (factor -> NUMBER .)
    MINUS           reduce using rule 21 (factor -> NUMBER .)
    TIMES           reduce using rule 21 (factor -> NUMBER .)
    DIVIDE          reduce using rule 21 (factor -> NUMBER .)
    MODULO          reduce using rule 21 (factor -> NUMBER .)
    EQUAL           reduce using rule 21 (factor -> NUMBER .)
    NOT_EQUAL       reduce using rule 21 (factor -> NUMBER .)
    GREATER         reduce using rule 21 (factor -> NUMBER .)
    LESS            reduce using rule 21 (factor -> NUMBER .)
    GREATER_EQUAL   reduce using rule 21 (factor -> NUMBER .)
    LESS_EQUAL      reduce using rule 21 (factor -> NUMBER .)
    R_PARENTHESIS   reduce using rule 21 (factor -> NUMBER .)
    COMMA           reduce using rule 21 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 21 (factor -> NUMBER .)
    R_BRACKET       reduce using rule 21 (factor -> NUMBER .)
    L_BRACE         reduce using rule 21 (factor -> NUMBER .)
    AND             reduce using rule 21 (factor -> NUMBER .)
    OR              reduce using rule 21 (factor -> NUMBER .)
    TO              reduce using rule 21 (factor -> NUMBER .)


state 44

    (23) factor -> uminus .

    PLUS            reduce using rule 23 (factor -> uminus .)
    MINUS           reduce using rule 23 (factor -> uminus .)
    TIMES           reduce using rule 23 (factor -> uminus .)
    DIVIDE          reduce using rule 23 (factor -> uminus .)
    MODULO          reduce using rule 23 (factor -> uminus .)
    EQUAL           reduce using rule 23 (factor -> uminus .)
    NOT_EQUAL       reduce using rule 23 (factor -> uminus .)
    GREATER         reduce using rule 23 (factor -> uminus .)
    LESS            reduce using rule 23 (factor -> uminus .)
    GREATER_EQUAL   reduce using rule 23 (factor -> uminus .)
    LESS_EQUAL      reduce using rule 23 (factor -> uminus .)
    R_PARENTHESIS   reduce using rule 23 (factor -> uminus .)
    COMMA           reduce using rule 23 (factor -> uminus .)
    SEMICOLON       reduce using rule 23 (factor -> uminus .)
    R_BRACKET       reduce using rule 23 (factor -> uminus .)
    L_BRACE         reduce using rule 23 (factor -> uminus .)
    AND             reduce using rule 23 (factor -> uminus .)
    OR              reduce using rule 23 (factor -> uminus .)
    TO              reduce using rule 23 (factor -> uminus .)


state 45

    (57) statement -> if elifs else .

    FOR             reduce using rule 57 (statement -> if elifs else .)
    FUNCTION        reduce using rule 57 (statement -> if elifs else .)
    NAME            reduce using rule 57 (statement -> if elifs else .)
    PRINT           reduce using rule 57 (statement -> if elifs else .)
    IF              reduce using rule 57 (statement -> if elifs else .)
    WHILE           reduce using rule 57 (statement -> if elifs else .)
    $end            reduce using rule 57 (statement -> if elifs else .)
    R_BRACE         reduce using rule 57 (statement -> if elifs else .)
    RETURN          reduce using rule 57 (statement -> if elifs else .)


state 46

    (52) elifs -> elifs elif .

    ELSE            reduce using rule 52 (elifs -> elifs elif .)
    ELIF            reduce using rule 52 (elifs -> elifs elif .)
    FOR             reduce using rule 52 (elifs -> elifs elif .)
    FUNCTION        reduce using rule 52 (elifs -> elifs elif .)
    NAME            reduce using rule 52 (elifs -> elifs elif .)
    PRINT           reduce using rule 52 (elifs -> elifs elif .)
    IF              reduce using rule 52 (elifs -> elifs elif .)
    WHILE           reduce using rule 52 (elifs -> elifs elif .)
    $end            reduce using rule 52 (elifs -> elifs elif .)
    R_BRACE         reduce using rule 52 (elifs -> elifs elif .)
    RETURN          reduce using rule 52 (elifs -> elifs elif .)


state 47

    (50) else -> ELSE L_BRACE . statements R_BRACE
    (1) statements -> . statements statement
    (2) statements -> . statement
    (3) statement -> . assignement
    (4) statement -> . print
    (55) statement -> . if
    (56) statement -> . if elifs
    (57) statement -> . if elifs else
    (58) statement -> . if else
    (59) statement -> . loop_while
    (61) statement -> . FOR L_PARENTHESIS NAME EQUALS expression TO expression COMMA STEP EQUALS expression R_PARENTHESIS L_BRACE statements R_BRACE
    (62) statement -> . FOR L_PARENTHESIS NAME EQUALS expression TO expression R_PARENTHESIS L_BRACE statements R_BRACE
    (68) statement -> . FUNCTION NAME L_BRACE statements R_BRACE
    (69) statement -> . FUNCTION NAME L_BRACE statements return R_BRACE
    (70) statement -> . FUNCTION NAME LESS parameter_list GREATER L_BRACE statements R_BRACE
    (71) statement -> . FUNCTION NAME LESS parameter_list GREATER L_BRACE statements return R_BRACE
    (72) statement -> . NAME L_PARENTHESIS argument_list R_PARENTHESIS SEMICOLON
    (73) statement -> . NAME L_PARENTHESIS R_PARENTHESIS SEMICOLON
    (5) assignement -> . NAME EQUALS expression_string SEMICOLON
    (6) assignement -> . NAME INCREMENT SEMICOLON
    (7) assignement -> . NAME DECREMENT SEMICOLON
    (24) assignement -> . array
    (35) assignement -> . change_element_array
    (11) print -> . PRINT L_PARENTHESIS expression_string R_PARENTHESIS SEMICOLON
    (54) if -> . IF L_PARENTHESIS booleans R_PARENTHESIS L_BRACE statements R_BRACE
    (60) loop_while -> . WHILE booleans L_BRACE statements R_BRACE
    (25) array -> . NAME EQUALS L_BRACKET R_BRACKET SEMICOLON
    (26) array -> . NAME EQUALS array_content SEMICOLON
    (36) change_element_array -> . NAME array_index EQUALS element SEMICOLON
    (37) change_element_array -> . NAME array_index array_index EQUALS element SEMICOLON

    FOR             shift and go to state 7
    FUNCTION        shift and go to state 9
    NAME            shift and go to state 8
    PRINT           shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 14

    statements                     shift and go to state 87
    statement                      shift and go to state 2
    assignement                    shift and go to state 3
    print                          shift and go to state 4
    if                             shift and go to state 5
    loop_while                     shift and go to state 6
    array                          shift and go to state 10
    change_element_array           shift and go to state 11

state 48

    (51) elif -> ELIF L_PARENTHESIS . booleans R_PARENTHESIS L_BRACE statements R_BRACE
    (40) booleans -> . booleans AND boolean
    (41) booleans -> . booleans OR boolean
    (42) booleans -> . boolean
    (43) booleans -> . L_PARENTHESIS booleans R_PARENTHESIS
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (44) boolean -> . expression_string EQUAL expression_string
    (45) boolean -> . expression_string NOT_EQUAL expression_string
    (46) boolean -> . expression_string GREATER expression_string
    (47) boolean -> . expression_string LESS expression_string
    (48) boolean -> . expression_string GREATER_EQUAL expression_string
    (49) boolean -> . expression_string LESS_EQUAL expression_string
    (8) expression_string -> . expression
    (9) expression_string -> . STRING
    (10) expression_string -> . boolean
    (33) expression_string -> . NAME array_index
    (34) expression_string -> . NAME array_index array_index
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression TIMES expression
    (16) expression -> . expression DIVIDE expression
    (17) expression -> . expression MODULO expression
    (18) expression -> . term
    (19) term -> . factor
    (20) term -> . NAME
    (21) factor -> . NUMBER
    (23) factor -> . uminus
    (22) uminus -> . MINUS NUMBER

    L_PARENTHESIS   shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    STRING          shift and go to state 38
    NAME            shift and go to state 39
    NUMBER          shift and go to state 43
    MINUS           shift and go to state 40

    booleans                       shift and go to state 88
    boolean                        shift and go to state 32
    expression_string              shift and go to state 36
    expression                     shift and go to state 37
    term                           shift and go to state 41
    factor                         shift and go to state 42
    uminus                         shift and go to state 44

state 49

    (61) statement -> FOR L_PARENTHESIS NAME . EQUALS expression TO expression COMMA STEP EQUALS expression R_PARENTHESIS L_BRACE statements R_BRACE
    (62) statement -> FOR L_PARENTHESIS NAME . EQUALS expression TO expression R_PARENTHESIS L_BRACE statements R_BRACE

    EQUALS          shift and go to state 89


state 50

    (20) term -> NAME .

    PLUS            reduce using rule 20 (term -> NAME .)
    MINUS           reduce using rule 20 (term -> NAME .)
    TIMES           reduce using rule 20 (term -> NAME .)
    DIVIDE          reduce using rule 20 (term -> NAME .)
    MODULO          reduce using rule 20 (term -> NAME .)
    R_PARENTHESIS   reduce using rule 20 (term -> NAME .)
    COMMA           reduce using rule 20 (term -> NAME .)
    R_BRACKET       reduce using rule 20 (term -> NAME .)
    EQUAL           reduce using rule 20 (term -> NAME .)
    NOT_EQUAL       reduce using rule 20 (term -> NAME .)
    GREATER         reduce using rule 20 (term -> NAME .)
    LESS            reduce using rule 20 (term -> NAME .)
    GREATER_EQUAL   reduce using rule 20 (term -> NAME .)
    LESS_EQUAL      reduce using rule 20 (term -> NAME .)
    SEMICOLON       reduce using rule 20 (term -> NAME .)
    L_BRACE         reduce using rule 20 (term -> NAME .)
    AND             reduce using rule 20 (term -> NAME .)
    OR              reduce using rule 20 (term -> NAME .)
    TO              reduce using rule 20 (term -> NAME .)


state 51

    (12) expression -> L_PARENTHESIS . expression R_PARENTHESIS
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression TIMES expression
    (16) expression -> . expression DIVIDE expression
    (17) expression -> . expression MODULO expression
    (18) expression -> . term
    (19) term -> . factor
    (20) term -> . NAME
    (21) factor -> . NUMBER
    (23) factor -> . uminus
    (22) uminus -> . MINUS NUMBER

    L_PARENTHESIS   shift and go to state 51
    NAME            shift and go to state 50
    NUMBER          shift and go to state 43
    MINUS           shift and go to state 40

    expression                     shift and go to state 90
    term                           shift and go to state 41
    factor                         shift and go to state 42
    uminus                         shift and go to state 44

state 52

    (72) statement -> NAME L_PARENTHESIS argument_list . R_PARENTHESIS SEMICOLON
    (64) argument_list -> argument_list . COMMA expression

    R_PARENTHESIS   shift and go to state 91
    COMMA           shift and go to state 92


state 53

    (73) statement -> NAME L_PARENTHESIS R_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 93


state 54

    (63) argument_list -> expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . TIMES expression
    (16) expression -> expression . DIVIDE expression
    (17) expression -> expression . MODULO expression

    R_PARENTHESIS   reduce using rule 63 (argument_list -> expression .)
    COMMA           reduce using rule 63 (argument_list -> expression .)
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    TIMES           shift and go to state 82
    DIVIDE          shift and go to state 83
    MODULO          shift and go to state 84


state 55

    (5) assignement -> NAME EQUALS expression_string . SEMICOLON
    (44) boolean -> expression_string . EQUAL expression_string
    (45) boolean -> expression_string . NOT_EQUAL expression_string
    (46) boolean -> expression_string . GREATER expression_string
    (47) boolean -> expression_string . LESS expression_string
    (48) boolean -> expression_string . GREATER_EQUAL expression_string
    (49) boolean -> expression_string . LESS_EQUAL expression_string

    SEMICOLON       shift and go to state 94
    EQUAL           shift and go to state 74
    NOT_EQUAL       shift and go to state 75
    GREATER         shift and go to state 76
    LESS            shift and go to state 77
    GREATER_EQUAL   shift and go to state 78
    LESS_EQUAL      shift and go to state 79


state 56

    (25) array -> NAME EQUALS L_BRACKET . R_BRACKET SEMICOLON
    (27) array_content -> L_BRACKET . elements R_BRACKET
    (28) elements -> . element COMMA elements
    (29) elements -> . element
    (30) element -> . expression_string
    (31) element -> . array_content
    (8) expression_string -> . expression
    (9) expression_string -> . STRING
    (10) expression_string -> . boolean
    (33) expression_string -> . NAME array_index
    (34) expression_string -> . NAME array_index array_index
    (27) array_content -> . L_BRACKET elements R_BRACKET
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression TIMES expression
    (16) expression -> . expression DIVIDE expression
    (17) expression -> . expression MODULO expression
    (18) expression -> . term
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (44) boolean -> . expression_string EQUAL expression_string
    (45) boolean -> . expression_string NOT_EQUAL expression_string
    (46) boolean -> . expression_string GREATER expression_string
    (47) boolean -> . expression_string LESS expression_string
    (48) boolean -> . expression_string GREATER_EQUAL expression_string
    (49) boolean -> . expression_string LESS_EQUAL expression_string
    (19) term -> . factor
    (20) term -> . NAME
    (21) factor -> . NUMBER
    (23) factor -> . uminus
    (22) uminus -> . MINUS NUMBER

    R_BRACKET       shift and go to state 96
    STRING          shift and go to state 38
    NAME            shift and go to state 39
    L_BRACKET       shift and go to state 95
    L_PARENTHESIS   shift and go to state 51
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    NUMBER          shift and go to state 43
    MINUS           shift and go to state 40

    elements                       shift and go to state 97
    element                        shift and go to state 98
    expression_string              shift and go to state 99
    array_content                  shift and go to state 100
    expression                     shift and go to state 37
    boolean                        shift and go to state 58
    term                           shift and go to state 41
    factor                         shift and go to state 42
    uminus                         shift and go to state 44

state 57

    (26) array -> NAME EQUALS array_content . SEMICOLON

    SEMICOLON       shift and go to state 101


state 58

    (10) expression_string -> boolean .

    SEMICOLON       reduce using rule 10 (expression_string -> boolean .)
    EQUAL           reduce using rule 10 (expression_string -> boolean .)
    NOT_EQUAL       reduce using rule 10 (expression_string -> boolean .)
    GREATER         reduce using rule 10 (expression_string -> boolean .)
    LESS            reduce using rule 10 (expression_string -> boolean .)
    GREATER_EQUAL   reduce using rule 10 (expression_string -> boolean .)
    LESS_EQUAL      reduce using rule 10 (expression_string -> boolean .)
    R_PARENTHESIS   reduce using rule 10 (expression_string -> boolean .)
    COMMA           reduce using rule 10 (expression_string -> boolean .)
    R_BRACKET       reduce using rule 10 (expression_string -> boolean .)
    L_BRACE         reduce using rule 10 (expression_string -> boolean .)
    AND             reduce using rule 10 (expression_string -> boolean .)
    OR              reduce using rule 10 (expression_string -> boolean .)


state 59

    (6) assignement -> NAME INCREMENT SEMICOLON .

    FOR             reduce using rule 6 (assignement -> NAME INCREMENT SEMICOLON .)
    FUNCTION        reduce using rule 6 (assignement -> NAME INCREMENT SEMICOLON .)
    NAME            reduce using rule 6 (assignement -> NAME INCREMENT SEMICOLON .)
    PRINT           reduce using rule 6 (assignement -> NAME INCREMENT SEMICOLON .)
    IF              reduce using rule 6 (assignement -> NAME INCREMENT SEMICOLON .)
    WHILE           reduce using rule 6 (assignement -> NAME INCREMENT SEMICOLON .)
    $end            reduce using rule 6 (assignement -> NAME INCREMENT SEMICOLON .)
    R_BRACE         reduce using rule 6 (assignement -> NAME INCREMENT SEMICOLON .)
    RETURN          reduce using rule 6 (assignement -> NAME INCREMENT SEMICOLON .)


state 60

    (7) assignement -> NAME DECREMENT SEMICOLON .

    FOR             reduce using rule 7 (assignement -> NAME DECREMENT SEMICOLON .)
    FUNCTION        reduce using rule 7 (assignement -> NAME DECREMENT SEMICOLON .)
    NAME            reduce using rule 7 (assignement -> NAME DECREMENT SEMICOLON .)
    PRINT           reduce using rule 7 (assignement -> NAME DECREMENT SEMICOLON .)
    IF              reduce using rule 7 (assignement -> NAME DECREMENT SEMICOLON .)
    WHILE           reduce using rule 7 (assignement -> NAME DECREMENT SEMICOLON .)
    $end            reduce using rule 7 (assignement -> NAME DECREMENT SEMICOLON .)
    R_BRACE         reduce using rule 7 (assignement -> NAME DECREMENT SEMICOLON .)
    RETURN          reduce using rule 7 (assignement -> NAME DECREMENT SEMICOLON .)


state 61

    (32) array_index -> L_BRACKET expression . R_BRACKET
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . TIMES expression
    (16) expression -> expression . DIVIDE expression
    (17) expression -> expression . MODULO expression

    R_BRACKET       shift and go to state 102
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    TIMES           shift and go to state 82
    DIVIDE          shift and go to state 83
    MODULO          shift and go to state 84


state 62

    (37) change_element_array -> NAME array_index array_index . EQUALS element SEMICOLON

    EQUALS          shift and go to state 103


state 63

    (36) change_element_array -> NAME array_index EQUALS . element SEMICOLON
    (30) element -> . expression_string
    (31) element -> . array_content
    (8) expression_string -> . expression
    (9) expression_string -> . STRING
    (10) expression_string -> . boolean
    (33) expression_string -> . NAME array_index
    (34) expression_string -> . NAME array_index array_index
    (27) array_content -> . L_BRACKET elements R_BRACKET
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression TIMES expression
    (16) expression -> . expression DIVIDE expression
    (17) expression -> . expression MODULO expression
    (18) expression -> . term
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (44) boolean -> . expression_string EQUAL expression_string
    (45) boolean -> . expression_string NOT_EQUAL expression_string
    (46) boolean -> . expression_string GREATER expression_string
    (47) boolean -> . expression_string LESS expression_string
    (48) boolean -> . expression_string GREATER_EQUAL expression_string
    (49) boolean -> . expression_string LESS_EQUAL expression_string
    (19) term -> . factor
    (20) term -> . NAME
    (21) factor -> . NUMBER
    (23) factor -> . uminus
    (22) uminus -> . MINUS NUMBER

    STRING          shift and go to state 38
    NAME            shift and go to state 39
    L_BRACKET       shift and go to state 95
    L_PARENTHESIS   shift and go to state 51
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    NUMBER          shift and go to state 43
    MINUS           shift and go to state 40

    element                        shift and go to state 104
    expression_string              shift and go to state 99
    array_content                  shift and go to state 100
    expression                     shift and go to state 37
    boolean                        shift and go to state 58
    term                           shift and go to state 41
    factor                         shift and go to state 42
    uminus                         shift and go to state 44

state 64

    (68) statement -> FUNCTION NAME L_BRACE . statements R_BRACE
    (69) statement -> FUNCTION NAME L_BRACE . statements return R_BRACE
    (1) statements -> . statements statement
    (2) statements -> . statement
    (3) statement -> . assignement
    (4) statement -> . print
    (55) statement -> . if
    (56) statement -> . if elifs
    (57) statement -> . if elifs else
    (58) statement -> . if else
    (59) statement -> . loop_while
    (61) statement -> . FOR L_PARENTHESIS NAME EQUALS expression TO expression COMMA STEP EQUALS expression R_PARENTHESIS L_BRACE statements R_BRACE
    (62) statement -> . FOR L_PARENTHESIS NAME EQUALS expression TO expression R_PARENTHESIS L_BRACE statements R_BRACE
    (68) statement -> . FUNCTION NAME L_BRACE statements R_BRACE
    (69) statement -> . FUNCTION NAME L_BRACE statements return R_BRACE
    (70) statement -> . FUNCTION NAME LESS parameter_list GREATER L_BRACE statements R_BRACE
    (71) statement -> . FUNCTION NAME LESS parameter_list GREATER L_BRACE statements return R_BRACE
    (72) statement -> . NAME L_PARENTHESIS argument_list R_PARENTHESIS SEMICOLON
    (73) statement -> . NAME L_PARENTHESIS R_PARENTHESIS SEMICOLON
    (5) assignement -> . NAME EQUALS expression_string SEMICOLON
    (6) assignement -> . NAME INCREMENT SEMICOLON
    (7) assignement -> . NAME DECREMENT SEMICOLON
    (24) assignement -> . array
    (35) assignement -> . change_element_array
    (11) print -> . PRINT L_PARENTHESIS expression_string R_PARENTHESIS SEMICOLON
    (54) if -> . IF L_PARENTHESIS booleans R_PARENTHESIS L_BRACE statements R_BRACE
    (60) loop_while -> . WHILE booleans L_BRACE statements R_BRACE
    (25) array -> . NAME EQUALS L_BRACKET R_BRACKET SEMICOLON
    (26) array -> . NAME EQUALS array_content SEMICOLON
    (36) change_element_array -> . NAME array_index EQUALS element SEMICOLON
    (37) change_element_array -> . NAME array_index array_index EQUALS element SEMICOLON

    FOR             shift and go to state 7
    FUNCTION        shift and go to state 9
    NAME            shift and go to state 8
    PRINT           shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 14

    statements                     shift and go to state 105
    statement                      shift and go to state 2
    assignement                    shift and go to state 3
    print                          shift and go to state 4
    if                             shift and go to state 5
    loop_while                     shift and go to state 6
    array                          shift and go to state 10
    change_element_array           shift and go to state 11

state 65

    (70) statement -> FUNCTION NAME LESS . parameter_list GREATER L_BRACE statements R_BRACE
    (71) statement -> FUNCTION NAME LESS . parameter_list GREATER L_BRACE statements return R_BRACE
    (66) parameter_list -> . parameter
    (67) parameter_list -> . parameter_list COMMA parameter
    (65) parameter -> . NAME

    NAME            shift and go to state 106

    parameter_list                 shift and go to state 107
    parameter                      shift and go to state 108

state 66

    (11) print -> PRINT L_PARENTHESIS expression_string . R_PARENTHESIS SEMICOLON
    (44) boolean -> expression_string . EQUAL expression_string
    (45) boolean -> expression_string . NOT_EQUAL expression_string
    (46) boolean -> expression_string . GREATER expression_string
    (47) boolean -> expression_string . LESS expression_string
    (48) boolean -> expression_string . GREATER_EQUAL expression_string
    (49) boolean -> expression_string . LESS_EQUAL expression_string

    R_PARENTHESIS   shift and go to state 109
    EQUAL           shift and go to state 74
    NOT_EQUAL       shift and go to state 75
    GREATER         shift and go to state 76
    LESS            shift and go to state 77
    GREATER_EQUAL   shift and go to state 78
    LESS_EQUAL      shift and go to state 79


state 67

    (54) if -> IF L_PARENTHESIS booleans . R_PARENTHESIS L_BRACE statements R_BRACE
    (40) booleans -> booleans . AND boolean
    (41) booleans -> booleans . OR boolean

    R_PARENTHESIS   shift and go to state 110
    AND             shift and go to state 69
    OR              shift and go to state 70


state 68

    (60) loop_while -> WHILE booleans L_BRACE . statements R_BRACE
    (1) statements -> . statements statement
    (2) statements -> . statement
    (3) statement -> . assignement
    (4) statement -> . print
    (55) statement -> . if
    (56) statement -> . if elifs
    (57) statement -> . if elifs else
    (58) statement -> . if else
    (59) statement -> . loop_while
    (61) statement -> . FOR L_PARENTHESIS NAME EQUALS expression TO expression COMMA STEP EQUALS expression R_PARENTHESIS L_BRACE statements R_BRACE
    (62) statement -> . FOR L_PARENTHESIS NAME EQUALS expression TO expression R_PARENTHESIS L_BRACE statements R_BRACE
    (68) statement -> . FUNCTION NAME L_BRACE statements R_BRACE
    (69) statement -> . FUNCTION NAME L_BRACE statements return R_BRACE
    (70) statement -> . FUNCTION NAME LESS parameter_list GREATER L_BRACE statements R_BRACE
    (71) statement -> . FUNCTION NAME LESS parameter_list GREATER L_BRACE statements return R_BRACE
    (72) statement -> . NAME L_PARENTHESIS argument_list R_PARENTHESIS SEMICOLON
    (73) statement -> . NAME L_PARENTHESIS R_PARENTHESIS SEMICOLON
    (5) assignement -> . NAME EQUALS expression_string SEMICOLON
    (6) assignement -> . NAME INCREMENT SEMICOLON
    (7) assignement -> . NAME DECREMENT SEMICOLON
    (24) assignement -> . array
    (35) assignement -> . change_element_array
    (11) print -> . PRINT L_PARENTHESIS expression_string R_PARENTHESIS SEMICOLON
    (54) if -> . IF L_PARENTHESIS booleans R_PARENTHESIS L_BRACE statements R_BRACE
    (60) loop_while -> . WHILE booleans L_BRACE statements R_BRACE
    (25) array -> . NAME EQUALS L_BRACKET R_BRACKET SEMICOLON
    (26) array -> . NAME EQUALS array_content SEMICOLON
    (36) change_element_array -> . NAME array_index EQUALS element SEMICOLON
    (37) change_element_array -> . NAME array_index array_index EQUALS element SEMICOLON

    FOR             shift and go to state 7
    FUNCTION        shift and go to state 9
    NAME            shift and go to state 8
    PRINT           shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 14

    statements                     shift and go to state 111
    statement                      shift and go to state 2
    assignement                    shift and go to state 3
    print                          shift and go to state 4
    if                             shift and go to state 5
    loop_while                     shift and go to state 6
    array                          shift and go to state 10
    change_element_array           shift and go to state 11

state 69

    (40) booleans -> booleans AND . boolean
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (44) boolean -> . expression_string EQUAL expression_string
    (45) boolean -> . expression_string NOT_EQUAL expression_string
    (46) boolean -> . expression_string GREATER expression_string
    (47) boolean -> . expression_string LESS expression_string
    (48) boolean -> . expression_string GREATER_EQUAL expression_string
    (49) boolean -> . expression_string LESS_EQUAL expression_string
    (8) expression_string -> . expression
    (9) expression_string -> . STRING
    (10) expression_string -> . boolean
    (33) expression_string -> . NAME array_index
    (34) expression_string -> . NAME array_index array_index
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression TIMES expression
    (16) expression -> . expression DIVIDE expression
    (17) expression -> . expression MODULO expression
    (18) expression -> . term
    (19) term -> . factor
    (20) term -> . NAME
    (21) factor -> . NUMBER
    (23) factor -> . uminus
    (22) uminus -> . MINUS NUMBER

    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    STRING          shift and go to state 38
    NAME            shift and go to state 39
    L_PARENTHESIS   shift and go to state 51
    NUMBER          shift and go to state 43
    MINUS           shift and go to state 40

    boolean                        shift and go to state 112
    expression_string              shift and go to state 36
    expression                     shift and go to state 37
    term                           shift and go to state 41
    factor                         shift and go to state 42
    uminus                         shift and go to state 44

state 70

    (41) booleans -> booleans OR . boolean
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (44) boolean -> . expression_string EQUAL expression_string
    (45) boolean -> . expression_string NOT_EQUAL expression_string
    (46) boolean -> . expression_string GREATER expression_string
    (47) boolean -> . expression_string LESS expression_string
    (48) boolean -> . expression_string GREATER_EQUAL expression_string
    (49) boolean -> . expression_string LESS_EQUAL expression_string
    (8) expression_string -> . expression
    (9) expression_string -> . STRING
    (10) expression_string -> . boolean
    (33) expression_string -> . NAME array_index
    (34) expression_string -> . NAME array_index array_index
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression TIMES expression
    (16) expression -> . expression DIVIDE expression
    (17) expression -> . expression MODULO expression
    (18) expression -> . term
    (19) term -> . factor
    (20) term -> . NAME
    (21) factor -> . NUMBER
    (23) factor -> . uminus
    (22) uminus -> . MINUS NUMBER

    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    STRING          shift and go to state 38
    NAME            shift and go to state 39
    L_PARENTHESIS   shift and go to state 51
    NUMBER          shift and go to state 43
    MINUS           shift and go to state 40

    boolean                        shift and go to state 113
    expression_string              shift and go to state 36
    expression                     shift and go to state 37
    term                           shift and go to state 41
    factor                         shift and go to state 42
    uminus                         shift and go to state 44

state 71

    (43) booleans -> L_PARENTHESIS booleans . R_PARENTHESIS
    (40) booleans -> booleans . AND boolean
    (41) booleans -> booleans . OR boolean

    R_PARENTHESIS   shift and go to state 114
    AND             shift and go to state 69
    OR              shift and go to state 70


state 72

    (12) expression -> L_PARENTHESIS expression . R_PARENTHESIS
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . TIMES expression
    (16) expression -> expression . DIVIDE expression
    (17) expression -> expression . MODULO expression
    (8) expression_string -> expression .

    R_PARENTHESIS   shift and go to state 115
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    TIMES           shift and go to state 82
    DIVIDE          shift and go to state 83
    MODULO          shift and go to state 84
    EQUAL           reduce using rule 8 (expression_string -> expression .)
    NOT_EQUAL       reduce using rule 8 (expression_string -> expression .)
    GREATER         reduce using rule 8 (expression_string -> expression .)
    LESS            reduce using rule 8 (expression_string -> expression .)
    GREATER_EQUAL   reduce using rule 8 (expression_string -> expression .)
    LESS_EQUAL      reduce using rule 8 (expression_string -> expression .)


state 73

    (20) term -> NAME .
    (33) expression_string -> NAME . array_index
    (34) expression_string -> NAME . array_index array_index
    (32) array_index -> . L_BRACKET expression R_BRACKET

    R_PARENTHESIS   reduce using rule 20 (term -> NAME .)
    PLUS            reduce using rule 20 (term -> NAME .)
    MINUS           reduce using rule 20 (term -> NAME .)
    TIMES           reduce using rule 20 (term -> NAME .)
    DIVIDE          reduce using rule 20 (term -> NAME .)
    MODULO          reduce using rule 20 (term -> NAME .)
    EQUAL           reduce using rule 20 (term -> NAME .)
    NOT_EQUAL       reduce using rule 20 (term -> NAME .)
    GREATER         reduce using rule 20 (term -> NAME .)
    LESS            reduce using rule 20 (term -> NAME .)
    GREATER_EQUAL   reduce using rule 20 (term -> NAME .)
    LESS_EQUAL      reduce using rule 20 (term -> NAME .)
    L_BRACKET       shift and go to state 26

    array_index                    shift and go to state 85

state 74

    (44) boolean -> expression_string EQUAL . expression_string
    (8) expression_string -> . expression
    (9) expression_string -> . STRING
    (10) expression_string -> . boolean
    (33) expression_string -> . NAME array_index
    (34) expression_string -> . NAME array_index array_index
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression TIMES expression
    (16) expression -> . expression DIVIDE expression
    (17) expression -> . expression MODULO expression
    (18) expression -> . term
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (44) boolean -> . expression_string EQUAL expression_string
    (45) boolean -> . expression_string NOT_EQUAL expression_string
    (46) boolean -> . expression_string GREATER expression_string
    (47) boolean -> . expression_string LESS expression_string
    (48) boolean -> . expression_string GREATER_EQUAL expression_string
    (49) boolean -> . expression_string LESS_EQUAL expression_string
    (19) term -> . factor
    (20) term -> . NAME
    (21) factor -> . NUMBER
    (23) factor -> . uminus
    (22) uminus -> . MINUS NUMBER

    STRING          shift and go to state 38
    NAME            shift and go to state 39
    L_PARENTHESIS   shift and go to state 51
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    NUMBER          shift and go to state 43
    MINUS           shift and go to state 40

    expression_string              shift and go to state 116
    expression                     shift and go to state 37
    boolean                        shift and go to state 58
    term                           shift and go to state 41
    factor                         shift and go to state 42
    uminus                         shift and go to state 44

state 75

    (45) boolean -> expression_string NOT_EQUAL . expression_string
    (8) expression_string -> . expression
    (9) expression_string -> . STRING
    (10) expression_string -> . boolean
    (33) expression_string -> . NAME array_index
    (34) expression_string -> . NAME array_index array_index
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression TIMES expression
    (16) expression -> . expression DIVIDE expression
    (17) expression -> . expression MODULO expression
    (18) expression -> . term
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (44) boolean -> . expression_string EQUAL expression_string
    (45) boolean -> . expression_string NOT_EQUAL expression_string
    (46) boolean -> . expression_string GREATER expression_string
    (47) boolean -> . expression_string LESS expression_string
    (48) boolean -> . expression_string GREATER_EQUAL expression_string
    (49) boolean -> . expression_string LESS_EQUAL expression_string
    (19) term -> . factor
    (20) term -> . NAME
    (21) factor -> . NUMBER
    (23) factor -> . uminus
    (22) uminus -> . MINUS NUMBER

    STRING          shift and go to state 38
    NAME            shift and go to state 39
    L_PARENTHESIS   shift and go to state 51
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    NUMBER          shift and go to state 43
    MINUS           shift and go to state 40

    expression_string              shift and go to state 117
    expression                     shift and go to state 37
    boolean                        shift and go to state 58
    term                           shift and go to state 41
    factor                         shift and go to state 42
    uminus                         shift and go to state 44

state 76

    (46) boolean -> expression_string GREATER . expression_string
    (8) expression_string -> . expression
    (9) expression_string -> . STRING
    (10) expression_string -> . boolean
    (33) expression_string -> . NAME array_index
    (34) expression_string -> . NAME array_index array_index
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression TIMES expression
    (16) expression -> . expression DIVIDE expression
    (17) expression -> . expression MODULO expression
    (18) expression -> . term
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (44) boolean -> . expression_string EQUAL expression_string
    (45) boolean -> . expression_string NOT_EQUAL expression_string
    (46) boolean -> . expression_string GREATER expression_string
    (47) boolean -> . expression_string LESS expression_string
    (48) boolean -> . expression_string GREATER_EQUAL expression_string
    (49) boolean -> . expression_string LESS_EQUAL expression_string
    (19) term -> . factor
    (20) term -> . NAME
    (21) factor -> . NUMBER
    (23) factor -> . uminus
    (22) uminus -> . MINUS NUMBER

    STRING          shift and go to state 38
    NAME            shift and go to state 39
    L_PARENTHESIS   shift and go to state 51
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    NUMBER          shift and go to state 43
    MINUS           shift and go to state 40

    expression_string              shift and go to state 118
    expression                     shift and go to state 37
    boolean                        shift and go to state 58
    term                           shift and go to state 41
    factor                         shift and go to state 42
    uminus                         shift and go to state 44

state 77

    (47) boolean -> expression_string LESS . expression_string
    (8) expression_string -> . expression
    (9) expression_string -> . STRING
    (10) expression_string -> . boolean
    (33) expression_string -> . NAME array_index
    (34) expression_string -> . NAME array_index array_index
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression TIMES expression
    (16) expression -> . expression DIVIDE expression
    (17) expression -> . expression MODULO expression
    (18) expression -> . term
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (44) boolean -> . expression_string EQUAL expression_string
    (45) boolean -> . expression_string NOT_EQUAL expression_string
    (46) boolean -> . expression_string GREATER expression_string
    (47) boolean -> . expression_string LESS expression_string
    (48) boolean -> . expression_string GREATER_EQUAL expression_string
    (49) boolean -> . expression_string LESS_EQUAL expression_string
    (19) term -> . factor
    (20) term -> . NAME
    (21) factor -> . NUMBER
    (23) factor -> . uminus
    (22) uminus -> . MINUS NUMBER

    STRING          shift and go to state 38
    NAME            shift and go to state 39
    L_PARENTHESIS   shift and go to state 51
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    NUMBER          shift and go to state 43
    MINUS           shift and go to state 40

    expression_string              shift and go to state 119
    expression                     shift and go to state 37
    boolean                        shift and go to state 58
    term                           shift and go to state 41
    factor                         shift and go to state 42
    uminus                         shift and go to state 44

state 78

    (48) boolean -> expression_string GREATER_EQUAL . expression_string
    (8) expression_string -> . expression
    (9) expression_string -> . STRING
    (10) expression_string -> . boolean
    (33) expression_string -> . NAME array_index
    (34) expression_string -> . NAME array_index array_index
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression TIMES expression
    (16) expression -> . expression DIVIDE expression
    (17) expression -> . expression MODULO expression
    (18) expression -> . term
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (44) boolean -> . expression_string EQUAL expression_string
    (45) boolean -> . expression_string NOT_EQUAL expression_string
    (46) boolean -> . expression_string GREATER expression_string
    (47) boolean -> . expression_string LESS expression_string
    (48) boolean -> . expression_string GREATER_EQUAL expression_string
    (49) boolean -> . expression_string LESS_EQUAL expression_string
    (19) term -> . factor
    (20) term -> . NAME
    (21) factor -> . NUMBER
    (23) factor -> . uminus
    (22) uminus -> . MINUS NUMBER

    STRING          shift and go to state 38
    NAME            shift and go to state 39
    L_PARENTHESIS   shift and go to state 51
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    NUMBER          shift and go to state 43
    MINUS           shift and go to state 40

    expression_string              shift and go to state 120
    expression                     shift and go to state 37
    boolean                        shift and go to state 58
    term                           shift and go to state 41
    factor                         shift and go to state 42
    uminus                         shift and go to state 44

state 79

    (49) boolean -> expression_string LESS_EQUAL . expression_string
    (8) expression_string -> . expression
    (9) expression_string -> . STRING
    (10) expression_string -> . boolean
    (33) expression_string -> . NAME array_index
    (34) expression_string -> . NAME array_index array_index
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression TIMES expression
    (16) expression -> . expression DIVIDE expression
    (17) expression -> . expression MODULO expression
    (18) expression -> . term
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (44) boolean -> . expression_string EQUAL expression_string
    (45) boolean -> . expression_string NOT_EQUAL expression_string
    (46) boolean -> . expression_string GREATER expression_string
    (47) boolean -> . expression_string LESS expression_string
    (48) boolean -> . expression_string GREATER_EQUAL expression_string
    (49) boolean -> . expression_string LESS_EQUAL expression_string
    (19) term -> . factor
    (20) term -> . NAME
    (21) factor -> . NUMBER
    (23) factor -> . uminus
    (22) uminus -> . MINUS NUMBER

    STRING          shift and go to state 38
    NAME            shift and go to state 39
    L_PARENTHESIS   shift and go to state 51
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    NUMBER          shift and go to state 43
    MINUS           shift and go to state 40

    expression_string              shift and go to state 121
    expression                     shift and go to state 37
    boolean                        shift and go to state 58
    term                           shift and go to state 41
    factor                         shift and go to state 42
    uminus                         shift and go to state 44

state 80

    (13) expression -> expression PLUS . expression
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression TIMES expression
    (16) expression -> . expression DIVIDE expression
    (17) expression -> . expression MODULO expression
    (18) expression -> . term
    (19) term -> . factor
    (20) term -> . NAME
    (21) factor -> . NUMBER
    (23) factor -> . uminus
    (22) uminus -> . MINUS NUMBER

    L_PARENTHESIS   shift and go to state 51
    NAME            shift and go to state 50
    NUMBER          shift and go to state 43
    MINUS           shift and go to state 40

    expression                     shift and go to state 122
    term                           shift and go to state 41
    factor                         shift and go to state 42
    uminus                         shift and go to state 44

state 81

    (14) expression -> expression MINUS . expression
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression TIMES expression
    (16) expression -> . expression DIVIDE expression
    (17) expression -> . expression MODULO expression
    (18) expression -> . term
    (19) term -> . factor
    (20) term -> . NAME
    (21) factor -> . NUMBER
    (23) factor -> . uminus
    (22) uminus -> . MINUS NUMBER

    L_PARENTHESIS   shift and go to state 51
    NAME            shift and go to state 50
    NUMBER          shift and go to state 43
    MINUS           shift and go to state 40

    expression                     shift and go to state 123
    term                           shift and go to state 41
    factor                         shift and go to state 42
    uminus                         shift and go to state 44

state 82

    (15) expression -> expression TIMES . expression
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression TIMES expression
    (16) expression -> . expression DIVIDE expression
    (17) expression -> . expression MODULO expression
    (18) expression -> . term
    (19) term -> . factor
    (20) term -> . NAME
    (21) factor -> . NUMBER
    (23) factor -> . uminus
    (22) uminus -> . MINUS NUMBER

    L_PARENTHESIS   shift and go to state 51
    NAME            shift and go to state 50
    NUMBER          shift and go to state 43
    MINUS           shift and go to state 40

    expression                     shift and go to state 124
    term                           shift and go to state 41
    factor                         shift and go to state 42
    uminus                         shift and go to state 44

state 83

    (16) expression -> expression DIVIDE . expression
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression TIMES expression
    (16) expression -> . expression DIVIDE expression
    (17) expression -> . expression MODULO expression
    (18) expression -> . term
    (19) term -> . factor
    (20) term -> . NAME
    (21) factor -> . NUMBER
    (23) factor -> . uminus
    (22) uminus -> . MINUS NUMBER

    L_PARENTHESIS   shift and go to state 51
    NAME            shift and go to state 50
    NUMBER          shift and go to state 43
    MINUS           shift and go to state 40

    expression                     shift and go to state 125
    term                           shift and go to state 41
    factor                         shift and go to state 42
    uminus                         shift and go to state 44

state 84

    (17) expression -> expression MODULO . expression
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression TIMES expression
    (16) expression -> . expression DIVIDE expression
    (17) expression -> . expression MODULO expression
    (18) expression -> . term
    (19) term -> . factor
    (20) term -> . NAME
    (21) factor -> . NUMBER
    (23) factor -> . uminus
    (22) uminus -> . MINUS NUMBER

    L_PARENTHESIS   shift and go to state 51
    NAME            shift and go to state 50
    NUMBER          shift and go to state 43
    MINUS           shift and go to state 40

    expression                     shift and go to state 126
    term                           shift and go to state 41
    factor                         shift and go to state 42
    uminus                         shift and go to state 44

state 85

    (33) expression_string -> NAME array_index .
    (34) expression_string -> NAME array_index . array_index
    (32) array_index -> . L_BRACKET expression R_BRACKET

    EQUAL           reduce using rule 33 (expression_string -> NAME array_index .)
    NOT_EQUAL       reduce using rule 33 (expression_string -> NAME array_index .)
    GREATER         reduce using rule 33 (expression_string -> NAME array_index .)
    LESS            reduce using rule 33 (expression_string -> NAME array_index .)
    GREATER_EQUAL   reduce using rule 33 (expression_string -> NAME array_index .)
    LESS_EQUAL      reduce using rule 33 (expression_string -> NAME array_index .)
    SEMICOLON       reduce using rule 33 (expression_string -> NAME array_index .)
    R_PARENTHESIS   reduce using rule 33 (expression_string -> NAME array_index .)
    COMMA           reduce using rule 33 (expression_string -> NAME array_index .)
    R_BRACKET       reduce using rule 33 (expression_string -> NAME array_index .)
    L_BRACE         reduce using rule 33 (expression_string -> NAME array_index .)
    AND             reduce using rule 33 (expression_string -> NAME array_index .)
    OR              reduce using rule 33 (expression_string -> NAME array_index .)
    L_BRACKET       shift and go to state 26

    array_index                    shift and go to state 127

state 86

    (22) uminus -> MINUS NUMBER .

    PLUS            reduce using rule 22 (uminus -> MINUS NUMBER .)
    MINUS           reduce using rule 22 (uminus -> MINUS NUMBER .)
    TIMES           reduce using rule 22 (uminus -> MINUS NUMBER .)
    DIVIDE          reduce using rule 22 (uminus -> MINUS NUMBER .)
    MODULO          reduce using rule 22 (uminus -> MINUS NUMBER .)
    EQUAL           reduce using rule 22 (uminus -> MINUS NUMBER .)
    NOT_EQUAL       reduce using rule 22 (uminus -> MINUS NUMBER .)
    GREATER         reduce using rule 22 (uminus -> MINUS NUMBER .)
    LESS            reduce using rule 22 (uminus -> MINUS NUMBER .)
    GREATER_EQUAL   reduce using rule 22 (uminus -> MINUS NUMBER .)
    LESS_EQUAL      reduce using rule 22 (uminus -> MINUS NUMBER .)
    R_PARENTHESIS   reduce using rule 22 (uminus -> MINUS NUMBER .)
    COMMA           reduce using rule 22 (uminus -> MINUS NUMBER .)
    SEMICOLON       reduce using rule 22 (uminus -> MINUS NUMBER .)
    R_BRACKET       reduce using rule 22 (uminus -> MINUS NUMBER .)
    L_BRACE         reduce using rule 22 (uminus -> MINUS NUMBER .)
    AND             reduce using rule 22 (uminus -> MINUS NUMBER .)
    OR              reduce using rule 22 (uminus -> MINUS NUMBER .)
    TO              reduce using rule 22 (uminus -> MINUS NUMBER .)


state 87

    (50) else -> ELSE L_BRACE statements . R_BRACE
    (1) statements -> statements . statement
    (3) statement -> . assignement
    (4) statement -> . print
    (55) statement -> . if
    (56) statement -> . if elifs
    (57) statement -> . if elifs else
    (58) statement -> . if else
    (59) statement -> . loop_while
    (61) statement -> . FOR L_PARENTHESIS NAME EQUALS expression TO expression COMMA STEP EQUALS expression R_PARENTHESIS L_BRACE statements R_BRACE
    (62) statement -> . FOR L_PARENTHESIS NAME EQUALS expression TO expression R_PARENTHESIS L_BRACE statements R_BRACE
    (68) statement -> . FUNCTION NAME L_BRACE statements R_BRACE
    (69) statement -> . FUNCTION NAME L_BRACE statements return R_BRACE
    (70) statement -> . FUNCTION NAME LESS parameter_list GREATER L_BRACE statements R_BRACE
    (71) statement -> . FUNCTION NAME LESS parameter_list GREATER L_BRACE statements return R_BRACE
    (72) statement -> . NAME L_PARENTHESIS argument_list R_PARENTHESIS SEMICOLON
    (73) statement -> . NAME L_PARENTHESIS R_PARENTHESIS SEMICOLON
    (5) assignement -> . NAME EQUALS expression_string SEMICOLON
    (6) assignement -> . NAME INCREMENT SEMICOLON
    (7) assignement -> . NAME DECREMENT SEMICOLON
    (24) assignement -> . array
    (35) assignement -> . change_element_array
    (11) print -> . PRINT L_PARENTHESIS expression_string R_PARENTHESIS SEMICOLON
    (54) if -> . IF L_PARENTHESIS booleans R_PARENTHESIS L_BRACE statements R_BRACE
    (60) loop_while -> . WHILE booleans L_BRACE statements R_BRACE
    (25) array -> . NAME EQUALS L_BRACKET R_BRACKET SEMICOLON
    (26) array -> . NAME EQUALS array_content SEMICOLON
    (36) change_element_array -> . NAME array_index EQUALS element SEMICOLON
    (37) change_element_array -> . NAME array_index array_index EQUALS element SEMICOLON

    R_BRACE         shift and go to state 128
    FOR             shift and go to state 7
    FUNCTION        shift and go to state 9
    NAME            shift and go to state 8
    PRINT           shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 14

    statement                      shift and go to state 15
    assignement                    shift and go to state 3
    print                          shift and go to state 4
    if                             shift and go to state 5
    loop_while                     shift and go to state 6
    array                          shift and go to state 10
    change_element_array           shift and go to state 11

state 88

    (51) elif -> ELIF L_PARENTHESIS booleans . R_PARENTHESIS L_BRACE statements R_BRACE
    (40) booleans -> booleans . AND boolean
    (41) booleans -> booleans . OR boolean

    R_PARENTHESIS   shift and go to state 129
    AND             shift and go to state 69
    OR              shift and go to state 70


state 89

    (61) statement -> FOR L_PARENTHESIS NAME EQUALS . expression TO expression COMMA STEP EQUALS expression R_PARENTHESIS L_BRACE statements R_BRACE
    (62) statement -> FOR L_PARENTHESIS NAME EQUALS . expression TO expression R_PARENTHESIS L_BRACE statements R_BRACE
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression TIMES expression
    (16) expression -> . expression DIVIDE expression
    (17) expression -> . expression MODULO expression
    (18) expression -> . term
    (19) term -> . factor
    (20) term -> . NAME
    (21) factor -> . NUMBER
    (23) factor -> . uminus
    (22) uminus -> . MINUS NUMBER

    L_PARENTHESIS   shift and go to state 51
    NAME            shift and go to state 50
    NUMBER          shift and go to state 43
    MINUS           shift and go to state 40

    expression                     shift and go to state 130
    term                           shift and go to state 41
    factor                         shift and go to state 42
    uminus                         shift and go to state 44

state 90

    (12) expression -> L_PARENTHESIS expression . R_PARENTHESIS
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . TIMES expression
    (16) expression -> expression . DIVIDE expression
    (17) expression -> expression . MODULO expression

    R_PARENTHESIS   shift and go to state 115
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    TIMES           shift and go to state 82
    DIVIDE          shift and go to state 83
    MODULO          shift and go to state 84


state 91

    (72) statement -> NAME L_PARENTHESIS argument_list R_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 131


state 92

    (64) argument_list -> argument_list COMMA . expression
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression TIMES expression
    (16) expression -> . expression DIVIDE expression
    (17) expression -> . expression MODULO expression
    (18) expression -> . term
    (19) term -> . factor
    (20) term -> . NAME
    (21) factor -> . NUMBER
    (23) factor -> . uminus
    (22) uminus -> . MINUS NUMBER

    L_PARENTHESIS   shift and go to state 51
    NAME            shift and go to state 50
    NUMBER          shift and go to state 43
    MINUS           shift and go to state 40

    expression                     shift and go to state 132
    term                           shift and go to state 41
    factor                         shift and go to state 42
    uminus                         shift and go to state 44

state 93

    (73) statement -> NAME L_PARENTHESIS R_PARENTHESIS SEMICOLON .

    FOR             reduce using rule 73 (statement -> NAME L_PARENTHESIS R_PARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 73 (statement -> NAME L_PARENTHESIS R_PARENTHESIS SEMICOLON .)
    NAME            reduce using rule 73 (statement -> NAME L_PARENTHESIS R_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 73 (statement -> NAME L_PARENTHESIS R_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 73 (statement -> NAME L_PARENTHESIS R_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 73 (statement -> NAME L_PARENTHESIS R_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 73 (statement -> NAME L_PARENTHESIS R_PARENTHESIS SEMICOLON .)
    R_BRACE         reduce using rule 73 (statement -> NAME L_PARENTHESIS R_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 73 (statement -> NAME L_PARENTHESIS R_PARENTHESIS SEMICOLON .)


state 94

    (5) assignement -> NAME EQUALS expression_string SEMICOLON .

    FOR             reduce using rule 5 (assignement -> NAME EQUALS expression_string SEMICOLON .)
    FUNCTION        reduce using rule 5 (assignement -> NAME EQUALS expression_string SEMICOLON .)
    NAME            reduce using rule 5 (assignement -> NAME EQUALS expression_string SEMICOLON .)
    PRINT           reduce using rule 5 (assignement -> NAME EQUALS expression_string SEMICOLON .)
    IF              reduce using rule 5 (assignement -> NAME EQUALS expression_string SEMICOLON .)
    WHILE           reduce using rule 5 (assignement -> NAME EQUALS expression_string SEMICOLON .)
    $end            reduce using rule 5 (assignement -> NAME EQUALS expression_string SEMICOLON .)
    R_BRACE         reduce using rule 5 (assignement -> NAME EQUALS expression_string SEMICOLON .)
    RETURN          reduce using rule 5 (assignement -> NAME EQUALS expression_string SEMICOLON .)


state 95

    (27) array_content -> L_BRACKET . elements R_BRACKET
    (28) elements -> . element COMMA elements
    (29) elements -> . element
    (30) element -> . expression_string
    (31) element -> . array_content
    (8) expression_string -> . expression
    (9) expression_string -> . STRING
    (10) expression_string -> . boolean
    (33) expression_string -> . NAME array_index
    (34) expression_string -> . NAME array_index array_index
    (27) array_content -> . L_BRACKET elements R_BRACKET
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression TIMES expression
    (16) expression -> . expression DIVIDE expression
    (17) expression -> . expression MODULO expression
    (18) expression -> . term
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (44) boolean -> . expression_string EQUAL expression_string
    (45) boolean -> . expression_string NOT_EQUAL expression_string
    (46) boolean -> . expression_string GREATER expression_string
    (47) boolean -> . expression_string LESS expression_string
    (48) boolean -> . expression_string GREATER_EQUAL expression_string
    (49) boolean -> . expression_string LESS_EQUAL expression_string
    (19) term -> . factor
    (20) term -> . NAME
    (21) factor -> . NUMBER
    (23) factor -> . uminus
    (22) uminus -> . MINUS NUMBER

    STRING          shift and go to state 38
    NAME            shift and go to state 39
    L_BRACKET       shift and go to state 95
    L_PARENTHESIS   shift and go to state 51
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    NUMBER          shift and go to state 43
    MINUS           shift and go to state 40

    elements                       shift and go to state 97
    element                        shift and go to state 98
    expression_string              shift and go to state 99
    array_content                  shift and go to state 100
    expression                     shift and go to state 37
    boolean                        shift and go to state 58
    term                           shift and go to state 41
    factor                         shift and go to state 42
    uminus                         shift and go to state 44

state 96

    (25) array -> NAME EQUALS L_BRACKET R_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 133


state 97

    (27) array_content -> L_BRACKET elements . R_BRACKET

    R_BRACKET       shift and go to state 134


state 98

    (28) elements -> element . COMMA elements
    (29) elements -> element .

    COMMA           shift and go to state 135
    R_BRACKET       reduce using rule 29 (elements -> element .)


state 99

    (30) element -> expression_string .
    (44) boolean -> expression_string . EQUAL expression_string
    (45) boolean -> expression_string . NOT_EQUAL expression_string
    (46) boolean -> expression_string . GREATER expression_string
    (47) boolean -> expression_string . LESS expression_string
    (48) boolean -> expression_string . GREATER_EQUAL expression_string
    (49) boolean -> expression_string . LESS_EQUAL expression_string

    COMMA           reduce using rule 30 (element -> expression_string .)
    R_BRACKET       reduce using rule 30 (element -> expression_string .)
    SEMICOLON       reduce using rule 30 (element -> expression_string .)
    EQUAL           shift and go to state 74
    NOT_EQUAL       shift and go to state 75
    GREATER         shift and go to state 76
    LESS            shift and go to state 77
    GREATER_EQUAL   shift and go to state 78
    LESS_EQUAL      shift and go to state 79


state 100

    (31) element -> array_content .

    COMMA           reduce using rule 31 (element -> array_content .)
    R_BRACKET       reduce using rule 31 (element -> array_content .)
    SEMICOLON       reduce using rule 31 (element -> array_content .)


state 101

    (26) array -> NAME EQUALS array_content SEMICOLON .

    FOR             reduce using rule 26 (array -> NAME EQUALS array_content SEMICOLON .)
    FUNCTION        reduce using rule 26 (array -> NAME EQUALS array_content SEMICOLON .)
    NAME            reduce using rule 26 (array -> NAME EQUALS array_content SEMICOLON .)
    PRINT           reduce using rule 26 (array -> NAME EQUALS array_content SEMICOLON .)
    IF              reduce using rule 26 (array -> NAME EQUALS array_content SEMICOLON .)
    WHILE           reduce using rule 26 (array -> NAME EQUALS array_content SEMICOLON .)
    $end            reduce using rule 26 (array -> NAME EQUALS array_content SEMICOLON .)
    R_BRACE         reduce using rule 26 (array -> NAME EQUALS array_content SEMICOLON .)
    RETURN          reduce using rule 26 (array -> NAME EQUALS array_content SEMICOLON .)


state 102

    (32) array_index -> L_BRACKET expression R_BRACKET .

    EQUALS          reduce using rule 32 (array_index -> L_BRACKET expression R_BRACKET .)
    L_BRACKET       reduce using rule 32 (array_index -> L_BRACKET expression R_BRACKET .)
    EQUAL           reduce using rule 32 (array_index -> L_BRACKET expression R_BRACKET .)
    NOT_EQUAL       reduce using rule 32 (array_index -> L_BRACKET expression R_BRACKET .)
    GREATER         reduce using rule 32 (array_index -> L_BRACKET expression R_BRACKET .)
    LESS            reduce using rule 32 (array_index -> L_BRACKET expression R_BRACKET .)
    GREATER_EQUAL   reduce using rule 32 (array_index -> L_BRACKET expression R_BRACKET .)
    LESS_EQUAL      reduce using rule 32 (array_index -> L_BRACKET expression R_BRACKET .)
    SEMICOLON       reduce using rule 32 (array_index -> L_BRACKET expression R_BRACKET .)
    R_PARENTHESIS   reduce using rule 32 (array_index -> L_BRACKET expression R_BRACKET .)
    COMMA           reduce using rule 32 (array_index -> L_BRACKET expression R_BRACKET .)
    R_BRACKET       reduce using rule 32 (array_index -> L_BRACKET expression R_BRACKET .)
    L_BRACE         reduce using rule 32 (array_index -> L_BRACKET expression R_BRACKET .)
    AND             reduce using rule 32 (array_index -> L_BRACKET expression R_BRACKET .)
    OR              reduce using rule 32 (array_index -> L_BRACKET expression R_BRACKET .)


state 103

    (37) change_element_array -> NAME array_index array_index EQUALS . element SEMICOLON
    (30) element -> . expression_string
    (31) element -> . array_content
    (8) expression_string -> . expression
    (9) expression_string -> . STRING
    (10) expression_string -> . boolean
    (33) expression_string -> . NAME array_index
    (34) expression_string -> . NAME array_index array_index
    (27) array_content -> . L_BRACKET elements R_BRACKET
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression TIMES expression
    (16) expression -> . expression DIVIDE expression
    (17) expression -> . expression MODULO expression
    (18) expression -> . term
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (44) boolean -> . expression_string EQUAL expression_string
    (45) boolean -> . expression_string NOT_EQUAL expression_string
    (46) boolean -> . expression_string GREATER expression_string
    (47) boolean -> . expression_string LESS expression_string
    (48) boolean -> . expression_string GREATER_EQUAL expression_string
    (49) boolean -> . expression_string LESS_EQUAL expression_string
    (19) term -> . factor
    (20) term -> . NAME
    (21) factor -> . NUMBER
    (23) factor -> . uminus
    (22) uminus -> . MINUS NUMBER

    STRING          shift and go to state 38
    NAME            shift and go to state 39
    L_BRACKET       shift and go to state 95
    L_PARENTHESIS   shift and go to state 51
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    NUMBER          shift and go to state 43
    MINUS           shift and go to state 40

    element                        shift and go to state 136
    expression_string              shift and go to state 99
    array_content                  shift and go to state 100
    expression                     shift and go to state 37
    boolean                        shift and go to state 58
    term                           shift and go to state 41
    factor                         shift and go to state 42
    uminus                         shift and go to state 44

state 104

    (36) change_element_array -> NAME array_index EQUALS element . SEMICOLON

    SEMICOLON       shift and go to state 137


state 105

    (68) statement -> FUNCTION NAME L_BRACE statements . R_BRACE
    (69) statement -> FUNCTION NAME L_BRACE statements . return R_BRACE
    (1) statements -> statements . statement
    (74) return -> . RETURN L_PARENTHESIS expression R_PARENTHESIS SEMICOLON
    (3) statement -> . assignement
    (4) statement -> . print
    (55) statement -> . if
    (56) statement -> . if elifs
    (57) statement -> . if elifs else
    (58) statement -> . if else
    (59) statement -> . loop_while
    (61) statement -> . FOR L_PARENTHESIS NAME EQUALS expression TO expression COMMA STEP EQUALS expression R_PARENTHESIS L_BRACE statements R_BRACE
    (62) statement -> . FOR L_PARENTHESIS NAME EQUALS expression TO expression R_PARENTHESIS L_BRACE statements R_BRACE
    (68) statement -> . FUNCTION NAME L_BRACE statements R_BRACE
    (69) statement -> . FUNCTION NAME L_BRACE statements return R_BRACE
    (70) statement -> . FUNCTION NAME LESS parameter_list GREATER L_BRACE statements R_BRACE
    (71) statement -> . FUNCTION NAME LESS parameter_list GREATER L_BRACE statements return R_BRACE
    (72) statement -> . NAME L_PARENTHESIS argument_list R_PARENTHESIS SEMICOLON
    (73) statement -> . NAME L_PARENTHESIS R_PARENTHESIS SEMICOLON
    (5) assignement -> . NAME EQUALS expression_string SEMICOLON
    (6) assignement -> . NAME INCREMENT SEMICOLON
    (7) assignement -> . NAME DECREMENT SEMICOLON
    (24) assignement -> . array
    (35) assignement -> . change_element_array
    (11) print -> . PRINT L_PARENTHESIS expression_string R_PARENTHESIS SEMICOLON
    (54) if -> . IF L_PARENTHESIS booleans R_PARENTHESIS L_BRACE statements R_BRACE
    (60) loop_while -> . WHILE booleans L_BRACE statements R_BRACE
    (25) array -> . NAME EQUALS L_BRACKET R_BRACKET SEMICOLON
    (26) array -> . NAME EQUALS array_content SEMICOLON
    (36) change_element_array -> . NAME array_index EQUALS element SEMICOLON
    (37) change_element_array -> . NAME array_index array_index EQUALS element SEMICOLON

    R_BRACE         shift and go to state 138
    RETURN          shift and go to state 140
    FOR             shift and go to state 7
    FUNCTION        shift and go to state 9
    NAME            shift and go to state 8
    PRINT           shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 14

    return                         shift and go to state 139
    statement                      shift and go to state 15
    assignement                    shift and go to state 3
    print                          shift and go to state 4
    if                             shift and go to state 5
    loop_while                     shift and go to state 6
    array                          shift and go to state 10
    change_element_array           shift and go to state 11

state 106

    (65) parameter -> NAME .

    GREATER         reduce using rule 65 (parameter -> NAME .)
    COMMA           reduce using rule 65 (parameter -> NAME .)


state 107

    (70) statement -> FUNCTION NAME LESS parameter_list . GREATER L_BRACE statements R_BRACE
    (71) statement -> FUNCTION NAME LESS parameter_list . GREATER L_BRACE statements return R_BRACE
    (67) parameter_list -> parameter_list . COMMA parameter

    GREATER         shift and go to state 141
    COMMA           shift and go to state 142


state 108

    (66) parameter_list -> parameter .

    GREATER         reduce using rule 66 (parameter_list -> parameter .)
    COMMA           reduce using rule 66 (parameter_list -> parameter .)


state 109

    (11) print -> PRINT L_PARENTHESIS expression_string R_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 143


state 110

    (54) if -> IF L_PARENTHESIS booleans R_PARENTHESIS . L_BRACE statements R_BRACE

    L_BRACE         shift and go to state 144


state 111

    (60) loop_while -> WHILE booleans L_BRACE statements . R_BRACE
    (1) statements -> statements . statement
    (3) statement -> . assignement
    (4) statement -> . print
    (55) statement -> . if
    (56) statement -> . if elifs
    (57) statement -> . if elifs else
    (58) statement -> . if else
    (59) statement -> . loop_while
    (61) statement -> . FOR L_PARENTHESIS NAME EQUALS expression TO expression COMMA STEP EQUALS expression R_PARENTHESIS L_BRACE statements R_BRACE
    (62) statement -> . FOR L_PARENTHESIS NAME EQUALS expression TO expression R_PARENTHESIS L_BRACE statements R_BRACE
    (68) statement -> . FUNCTION NAME L_BRACE statements R_BRACE
    (69) statement -> . FUNCTION NAME L_BRACE statements return R_BRACE
    (70) statement -> . FUNCTION NAME LESS parameter_list GREATER L_BRACE statements R_BRACE
    (71) statement -> . FUNCTION NAME LESS parameter_list GREATER L_BRACE statements return R_BRACE
    (72) statement -> . NAME L_PARENTHESIS argument_list R_PARENTHESIS SEMICOLON
    (73) statement -> . NAME L_PARENTHESIS R_PARENTHESIS SEMICOLON
    (5) assignement -> . NAME EQUALS expression_string SEMICOLON
    (6) assignement -> . NAME INCREMENT SEMICOLON
    (7) assignement -> . NAME DECREMENT SEMICOLON
    (24) assignement -> . array
    (35) assignement -> . change_element_array
    (11) print -> . PRINT L_PARENTHESIS expression_string R_PARENTHESIS SEMICOLON
    (54) if -> . IF L_PARENTHESIS booleans R_PARENTHESIS L_BRACE statements R_BRACE
    (60) loop_while -> . WHILE booleans L_BRACE statements R_BRACE
    (25) array -> . NAME EQUALS L_BRACKET R_BRACKET SEMICOLON
    (26) array -> . NAME EQUALS array_content SEMICOLON
    (36) change_element_array -> . NAME array_index EQUALS element SEMICOLON
    (37) change_element_array -> . NAME array_index array_index EQUALS element SEMICOLON

    R_BRACE         shift and go to state 145
    FOR             shift and go to state 7
    FUNCTION        shift and go to state 9
    NAME            shift and go to state 8
    PRINT           shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 14

    statement                      shift and go to state 15
    assignement                    shift and go to state 3
    print                          shift and go to state 4
    if                             shift and go to state 5
    loop_while                     shift and go to state 6
    array                          shift and go to state 10
    change_element_array           shift and go to state 11

state 112

    (40) booleans -> booleans AND boolean .
    (10) expression_string -> boolean .

    L_BRACE         reduce using rule 40 (booleans -> booleans AND boolean .)
    AND             reduce using rule 40 (booleans -> booleans AND boolean .)
    OR              reduce using rule 40 (booleans -> booleans AND boolean .)
    R_PARENTHESIS   reduce using rule 40 (booleans -> booleans AND boolean .)
    EQUAL           reduce using rule 10 (expression_string -> boolean .)
    NOT_EQUAL       reduce using rule 10 (expression_string -> boolean .)
    GREATER         reduce using rule 10 (expression_string -> boolean .)
    LESS            reduce using rule 10 (expression_string -> boolean .)
    GREATER_EQUAL   reduce using rule 10 (expression_string -> boolean .)
    LESS_EQUAL      reduce using rule 10 (expression_string -> boolean .)


state 113

    (41) booleans -> booleans OR boolean .
    (10) expression_string -> boolean .

    L_BRACE         reduce using rule 41 (booleans -> booleans OR boolean .)
    AND             reduce using rule 41 (booleans -> booleans OR boolean .)
    OR              reduce using rule 41 (booleans -> booleans OR boolean .)
    R_PARENTHESIS   reduce using rule 41 (booleans -> booleans OR boolean .)
    EQUAL           reduce using rule 10 (expression_string -> boolean .)
    NOT_EQUAL       reduce using rule 10 (expression_string -> boolean .)
    GREATER         reduce using rule 10 (expression_string -> boolean .)
    LESS            reduce using rule 10 (expression_string -> boolean .)
    GREATER_EQUAL   reduce using rule 10 (expression_string -> boolean .)
    LESS_EQUAL      reduce using rule 10 (expression_string -> boolean .)


state 114

    (43) booleans -> L_PARENTHESIS booleans R_PARENTHESIS .

    L_BRACE         reduce using rule 43 (booleans -> L_PARENTHESIS booleans R_PARENTHESIS .)
    AND             reduce using rule 43 (booleans -> L_PARENTHESIS booleans R_PARENTHESIS .)
    OR              reduce using rule 43 (booleans -> L_PARENTHESIS booleans R_PARENTHESIS .)
    R_PARENTHESIS   reduce using rule 43 (booleans -> L_PARENTHESIS booleans R_PARENTHESIS .)


state 115

    (12) expression -> L_PARENTHESIS expression R_PARENTHESIS .

    PLUS            reduce using rule 12 (expression -> L_PARENTHESIS expression R_PARENTHESIS .)
    MINUS           reduce using rule 12 (expression -> L_PARENTHESIS expression R_PARENTHESIS .)
    TIMES           reduce using rule 12 (expression -> L_PARENTHESIS expression R_PARENTHESIS .)
    DIVIDE          reduce using rule 12 (expression -> L_PARENTHESIS expression R_PARENTHESIS .)
    MODULO          reduce using rule 12 (expression -> L_PARENTHESIS expression R_PARENTHESIS .)
    EQUAL           reduce using rule 12 (expression -> L_PARENTHESIS expression R_PARENTHESIS .)
    NOT_EQUAL       reduce using rule 12 (expression -> L_PARENTHESIS expression R_PARENTHESIS .)
    GREATER         reduce using rule 12 (expression -> L_PARENTHESIS expression R_PARENTHESIS .)
    LESS            reduce using rule 12 (expression -> L_PARENTHESIS expression R_PARENTHESIS .)
    GREATER_EQUAL   reduce using rule 12 (expression -> L_PARENTHESIS expression R_PARENTHESIS .)
    LESS_EQUAL      reduce using rule 12 (expression -> L_PARENTHESIS expression R_PARENTHESIS .)
    R_PARENTHESIS   reduce using rule 12 (expression -> L_PARENTHESIS expression R_PARENTHESIS .)
    COMMA           reduce using rule 12 (expression -> L_PARENTHESIS expression R_PARENTHESIS .)
    SEMICOLON       reduce using rule 12 (expression -> L_PARENTHESIS expression R_PARENTHESIS .)
    R_BRACKET       reduce using rule 12 (expression -> L_PARENTHESIS expression R_PARENTHESIS .)
    L_BRACE         reduce using rule 12 (expression -> L_PARENTHESIS expression R_PARENTHESIS .)
    AND             reduce using rule 12 (expression -> L_PARENTHESIS expression R_PARENTHESIS .)
    OR              reduce using rule 12 (expression -> L_PARENTHESIS expression R_PARENTHESIS .)
    TO              reduce using rule 12 (expression -> L_PARENTHESIS expression R_PARENTHESIS .)


state 116

    (44) boolean -> expression_string EQUAL expression_string .
    (44) boolean -> expression_string . EQUAL expression_string
    (45) boolean -> expression_string . NOT_EQUAL expression_string
    (46) boolean -> expression_string . GREATER expression_string
    (47) boolean -> expression_string . LESS expression_string
    (48) boolean -> expression_string . GREATER_EQUAL expression_string
    (49) boolean -> expression_string . LESS_EQUAL expression_string

  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
    L_BRACE         reduce using rule 44 (boolean -> expression_string EQUAL expression_string .)
    AND             reduce using rule 44 (boolean -> expression_string EQUAL expression_string .)
    OR              reduce using rule 44 (boolean -> expression_string EQUAL expression_string .)
    SEMICOLON       reduce using rule 44 (boolean -> expression_string EQUAL expression_string .)
    R_PARENTHESIS   reduce using rule 44 (boolean -> expression_string EQUAL expression_string .)
    COMMA           reduce using rule 44 (boolean -> expression_string EQUAL expression_string .)
    R_BRACKET       reduce using rule 44 (boolean -> expression_string EQUAL expression_string .)
    EQUAL           shift and go to state 74
    NOT_EQUAL       shift and go to state 75
    GREATER         shift and go to state 76
    LESS            shift and go to state 77
    GREATER_EQUAL   shift and go to state 78
    LESS_EQUAL      shift and go to state 79

  ! EQUAL           [ reduce using rule 44 (boolean -> expression_string EQUAL expression_string .) ]
  ! NOT_EQUAL       [ reduce using rule 44 (boolean -> expression_string EQUAL expression_string .) ]
  ! GREATER         [ reduce using rule 44 (boolean -> expression_string EQUAL expression_string .) ]
  ! LESS            [ reduce using rule 44 (boolean -> expression_string EQUAL expression_string .) ]
  ! GREATER_EQUAL   [ reduce using rule 44 (boolean -> expression_string EQUAL expression_string .) ]
  ! LESS_EQUAL      [ reduce using rule 44 (boolean -> expression_string EQUAL expression_string .) ]


state 117

    (45) boolean -> expression_string NOT_EQUAL expression_string .
    (44) boolean -> expression_string . EQUAL expression_string
    (45) boolean -> expression_string . NOT_EQUAL expression_string
    (46) boolean -> expression_string . GREATER expression_string
    (47) boolean -> expression_string . LESS expression_string
    (48) boolean -> expression_string . GREATER_EQUAL expression_string
    (49) boolean -> expression_string . LESS_EQUAL expression_string

  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
    L_BRACE         reduce using rule 45 (boolean -> expression_string NOT_EQUAL expression_string .)
    AND             reduce using rule 45 (boolean -> expression_string NOT_EQUAL expression_string .)
    OR              reduce using rule 45 (boolean -> expression_string NOT_EQUAL expression_string .)
    SEMICOLON       reduce using rule 45 (boolean -> expression_string NOT_EQUAL expression_string .)
    R_PARENTHESIS   reduce using rule 45 (boolean -> expression_string NOT_EQUAL expression_string .)
    COMMA           reduce using rule 45 (boolean -> expression_string NOT_EQUAL expression_string .)
    R_BRACKET       reduce using rule 45 (boolean -> expression_string NOT_EQUAL expression_string .)
    EQUAL           shift and go to state 74
    NOT_EQUAL       shift and go to state 75
    GREATER         shift and go to state 76
    LESS            shift and go to state 77
    GREATER_EQUAL   shift and go to state 78
    LESS_EQUAL      shift and go to state 79

  ! EQUAL           [ reduce using rule 45 (boolean -> expression_string NOT_EQUAL expression_string .) ]
  ! NOT_EQUAL       [ reduce using rule 45 (boolean -> expression_string NOT_EQUAL expression_string .) ]
  ! GREATER         [ reduce using rule 45 (boolean -> expression_string NOT_EQUAL expression_string .) ]
  ! LESS            [ reduce using rule 45 (boolean -> expression_string NOT_EQUAL expression_string .) ]
  ! GREATER_EQUAL   [ reduce using rule 45 (boolean -> expression_string NOT_EQUAL expression_string .) ]
  ! LESS_EQUAL      [ reduce using rule 45 (boolean -> expression_string NOT_EQUAL expression_string .) ]


state 118

    (46) boolean -> expression_string GREATER expression_string .
    (44) boolean -> expression_string . EQUAL expression_string
    (45) boolean -> expression_string . NOT_EQUAL expression_string
    (46) boolean -> expression_string . GREATER expression_string
    (47) boolean -> expression_string . LESS expression_string
    (48) boolean -> expression_string . GREATER_EQUAL expression_string
    (49) boolean -> expression_string . LESS_EQUAL expression_string

  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
    L_BRACE         reduce using rule 46 (boolean -> expression_string GREATER expression_string .)
    AND             reduce using rule 46 (boolean -> expression_string GREATER expression_string .)
    OR              reduce using rule 46 (boolean -> expression_string GREATER expression_string .)
    SEMICOLON       reduce using rule 46 (boolean -> expression_string GREATER expression_string .)
    R_PARENTHESIS   reduce using rule 46 (boolean -> expression_string GREATER expression_string .)
    COMMA           reduce using rule 46 (boolean -> expression_string GREATER expression_string .)
    R_BRACKET       reduce using rule 46 (boolean -> expression_string GREATER expression_string .)
    EQUAL           shift and go to state 74
    NOT_EQUAL       shift and go to state 75
    GREATER         shift and go to state 76
    LESS            shift and go to state 77
    GREATER_EQUAL   shift and go to state 78
    LESS_EQUAL      shift and go to state 79

  ! EQUAL           [ reduce using rule 46 (boolean -> expression_string GREATER expression_string .) ]
  ! NOT_EQUAL       [ reduce using rule 46 (boolean -> expression_string GREATER expression_string .) ]
  ! GREATER         [ reduce using rule 46 (boolean -> expression_string GREATER expression_string .) ]
  ! LESS            [ reduce using rule 46 (boolean -> expression_string GREATER expression_string .) ]
  ! GREATER_EQUAL   [ reduce using rule 46 (boolean -> expression_string GREATER expression_string .) ]
  ! LESS_EQUAL      [ reduce using rule 46 (boolean -> expression_string GREATER expression_string .) ]


state 119

    (47) boolean -> expression_string LESS expression_string .
    (44) boolean -> expression_string . EQUAL expression_string
    (45) boolean -> expression_string . NOT_EQUAL expression_string
    (46) boolean -> expression_string . GREATER expression_string
    (47) boolean -> expression_string . LESS expression_string
    (48) boolean -> expression_string . GREATER_EQUAL expression_string
    (49) boolean -> expression_string . LESS_EQUAL expression_string

  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
    L_BRACE         reduce using rule 47 (boolean -> expression_string LESS expression_string .)
    AND             reduce using rule 47 (boolean -> expression_string LESS expression_string .)
    OR              reduce using rule 47 (boolean -> expression_string LESS expression_string .)
    SEMICOLON       reduce using rule 47 (boolean -> expression_string LESS expression_string .)
    R_PARENTHESIS   reduce using rule 47 (boolean -> expression_string LESS expression_string .)
    COMMA           reduce using rule 47 (boolean -> expression_string LESS expression_string .)
    R_BRACKET       reduce using rule 47 (boolean -> expression_string LESS expression_string .)
    EQUAL           shift and go to state 74
    NOT_EQUAL       shift and go to state 75
    GREATER         shift and go to state 76
    LESS            shift and go to state 77
    GREATER_EQUAL   shift and go to state 78
    LESS_EQUAL      shift and go to state 79

  ! EQUAL           [ reduce using rule 47 (boolean -> expression_string LESS expression_string .) ]
  ! NOT_EQUAL       [ reduce using rule 47 (boolean -> expression_string LESS expression_string .) ]
  ! GREATER         [ reduce using rule 47 (boolean -> expression_string LESS expression_string .) ]
  ! LESS            [ reduce using rule 47 (boolean -> expression_string LESS expression_string .) ]
  ! GREATER_EQUAL   [ reduce using rule 47 (boolean -> expression_string LESS expression_string .) ]
  ! LESS_EQUAL      [ reduce using rule 47 (boolean -> expression_string LESS expression_string .) ]


state 120

    (48) boolean -> expression_string GREATER_EQUAL expression_string .
    (44) boolean -> expression_string . EQUAL expression_string
    (45) boolean -> expression_string . NOT_EQUAL expression_string
    (46) boolean -> expression_string . GREATER expression_string
    (47) boolean -> expression_string . LESS expression_string
    (48) boolean -> expression_string . GREATER_EQUAL expression_string
    (49) boolean -> expression_string . LESS_EQUAL expression_string

  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
    L_BRACE         reduce using rule 48 (boolean -> expression_string GREATER_EQUAL expression_string .)
    AND             reduce using rule 48 (boolean -> expression_string GREATER_EQUAL expression_string .)
    OR              reduce using rule 48 (boolean -> expression_string GREATER_EQUAL expression_string .)
    SEMICOLON       reduce using rule 48 (boolean -> expression_string GREATER_EQUAL expression_string .)
    R_PARENTHESIS   reduce using rule 48 (boolean -> expression_string GREATER_EQUAL expression_string .)
    COMMA           reduce using rule 48 (boolean -> expression_string GREATER_EQUAL expression_string .)
    R_BRACKET       reduce using rule 48 (boolean -> expression_string GREATER_EQUAL expression_string .)
    EQUAL           shift and go to state 74
    NOT_EQUAL       shift and go to state 75
    GREATER         shift and go to state 76
    LESS            shift and go to state 77
    GREATER_EQUAL   shift and go to state 78
    LESS_EQUAL      shift and go to state 79

  ! EQUAL           [ reduce using rule 48 (boolean -> expression_string GREATER_EQUAL expression_string .) ]
  ! NOT_EQUAL       [ reduce using rule 48 (boolean -> expression_string GREATER_EQUAL expression_string .) ]
  ! GREATER         [ reduce using rule 48 (boolean -> expression_string GREATER_EQUAL expression_string .) ]
  ! LESS            [ reduce using rule 48 (boolean -> expression_string GREATER_EQUAL expression_string .) ]
  ! GREATER_EQUAL   [ reduce using rule 48 (boolean -> expression_string GREATER_EQUAL expression_string .) ]
  ! LESS_EQUAL      [ reduce using rule 48 (boolean -> expression_string GREATER_EQUAL expression_string .) ]


state 121

    (49) boolean -> expression_string LESS_EQUAL expression_string .
    (44) boolean -> expression_string . EQUAL expression_string
    (45) boolean -> expression_string . NOT_EQUAL expression_string
    (46) boolean -> expression_string . GREATER expression_string
    (47) boolean -> expression_string . LESS expression_string
    (48) boolean -> expression_string . GREATER_EQUAL expression_string
    (49) boolean -> expression_string . LESS_EQUAL expression_string

  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
    L_BRACE         reduce using rule 49 (boolean -> expression_string LESS_EQUAL expression_string .)
    AND             reduce using rule 49 (boolean -> expression_string LESS_EQUAL expression_string .)
    OR              reduce using rule 49 (boolean -> expression_string LESS_EQUAL expression_string .)
    SEMICOLON       reduce using rule 49 (boolean -> expression_string LESS_EQUAL expression_string .)
    R_PARENTHESIS   reduce using rule 49 (boolean -> expression_string LESS_EQUAL expression_string .)
    COMMA           reduce using rule 49 (boolean -> expression_string LESS_EQUAL expression_string .)
    R_BRACKET       reduce using rule 49 (boolean -> expression_string LESS_EQUAL expression_string .)
    EQUAL           shift and go to state 74
    NOT_EQUAL       shift and go to state 75
    GREATER         shift and go to state 76
    LESS            shift and go to state 77
    GREATER_EQUAL   shift and go to state 78
    LESS_EQUAL      shift and go to state 79

  ! EQUAL           [ reduce using rule 49 (boolean -> expression_string LESS_EQUAL expression_string .) ]
  ! NOT_EQUAL       [ reduce using rule 49 (boolean -> expression_string LESS_EQUAL expression_string .) ]
  ! GREATER         [ reduce using rule 49 (boolean -> expression_string LESS_EQUAL expression_string .) ]
  ! LESS            [ reduce using rule 49 (boolean -> expression_string LESS_EQUAL expression_string .) ]
  ! GREATER_EQUAL   [ reduce using rule 49 (boolean -> expression_string LESS_EQUAL expression_string .) ]
  ! LESS_EQUAL      [ reduce using rule 49 (boolean -> expression_string LESS_EQUAL expression_string .) ]


state 122

    (13) expression -> expression PLUS expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . TIMES expression
    (16) expression -> expression . DIVIDE expression
    (17) expression -> expression . MODULO expression

    PLUS            reduce using rule 13 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 13 (expression -> expression PLUS expression .)
    MODULO          reduce using rule 13 (expression -> expression PLUS expression .)
    EQUAL           reduce using rule 13 (expression -> expression PLUS expression .)
    NOT_EQUAL       reduce using rule 13 (expression -> expression PLUS expression .)
    GREATER         reduce using rule 13 (expression -> expression PLUS expression .)
    LESS            reduce using rule 13 (expression -> expression PLUS expression .)
    GREATER_EQUAL   reduce using rule 13 (expression -> expression PLUS expression .)
    LESS_EQUAL      reduce using rule 13 (expression -> expression PLUS expression .)
    R_PARENTHESIS   reduce using rule 13 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 13 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 13 (expression -> expression PLUS expression .)
    R_BRACKET       reduce using rule 13 (expression -> expression PLUS expression .)
    L_BRACE         reduce using rule 13 (expression -> expression PLUS expression .)
    AND             reduce using rule 13 (expression -> expression PLUS expression .)
    OR              reduce using rule 13 (expression -> expression PLUS expression .)
    TO              reduce using rule 13 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 82
    DIVIDE          shift and go to state 83

  ! TIMES           [ reduce using rule 13 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 13 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 80 ]
  ! MINUS           [ shift and go to state 81 ]
  ! MODULO          [ shift and go to state 84 ]


state 123

    (14) expression -> expression MINUS expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . TIMES expression
    (16) expression -> expression . DIVIDE expression
    (17) expression -> expression . MODULO expression

    PLUS            reduce using rule 14 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 14 (expression -> expression MINUS expression .)
    MODULO          reduce using rule 14 (expression -> expression MINUS expression .)
    EQUAL           reduce using rule 14 (expression -> expression MINUS expression .)
    NOT_EQUAL       reduce using rule 14 (expression -> expression MINUS expression .)
    GREATER         reduce using rule 14 (expression -> expression MINUS expression .)
    LESS            reduce using rule 14 (expression -> expression MINUS expression .)
    GREATER_EQUAL   reduce using rule 14 (expression -> expression MINUS expression .)
    LESS_EQUAL      reduce using rule 14 (expression -> expression MINUS expression .)
    R_PARENTHESIS   reduce using rule 14 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 14 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 14 (expression -> expression MINUS expression .)
    R_BRACKET       reduce using rule 14 (expression -> expression MINUS expression .)
    L_BRACE         reduce using rule 14 (expression -> expression MINUS expression .)
    AND             reduce using rule 14 (expression -> expression MINUS expression .)
    OR              reduce using rule 14 (expression -> expression MINUS expression .)
    TO              reduce using rule 14 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 82
    DIVIDE          shift and go to state 83

  ! TIMES           [ reduce using rule 14 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 14 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 80 ]
  ! MINUS           [ shift and go to state 81 ]
  ! MODULO          [ shift and go to state 84 ]


state 124

    (15) expression -> expression TIMES expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . TIMES expression
    (16) expression -> expression . DIVIDE expression
    (17) expression -> expression . MODULO expression

    PLUS            reduce using rule 15 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 15 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 15 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 15 (expression -> expression TIMES expression .)
    MODULO          reduce using rule 15 (expression -> expression TIMES expression .)
    EQUAL           reduce using rule 15 (expression -> expression TIMES expression .)
    NOT_EQUAL       reduce using rule 15 (expression -> expression TIMES expression .)
    GREATER         reduce using rule 15 (expression -> expression TIMES expression .)
    LESS            reduce using rule 15 (expression -> expression TIMES expression .)
    GREATER_EQUAL   reduce using rule 15 (expression -> expression TIMES expression .)
    LESS_EQUAL      reduce using rule 15 (expression -> expression TIMES expression .)
    R_PARENTHESIS   reduce using rule 15 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 15 (expression -> expression TIMES expression .)
    SEMICOLON       reduce using rule 15 (expression -> expression TIMES expression .)
    R_BRACKET       reduce using rule 15 (expression -> expression TIMES expression .)
    L_BRACE         reduce using rule 15 (expression -> expression TIMES expression .)
    AND             reduce using rule 15 (expression -> expression TIMES expression .)
    OR              reduce using rule 15 (expression -> expression TIMES expression .)
    TO              reduce using rule 15 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 80 ]
  ! MINUS           [ shift and go to state 81 ]
  ! TIMES           [ shift and go to state 82 ]
  ! DIVIDE          [ shift and go to state 83 ]
  ! MODULO          [ shift and go to state 84 ]


state 125

    (16) expression -> expression DIVIDE expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . TIMES expression
    (16) expression -> expression . DIVIDE expression
    (17) expression -> expression . MODULO expression

    PLUS            reduce using rule 16 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 16 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 16 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 16 (expression -> expression DIVIDE expression .)
    MODULO          reduce using rule 16 (expression -> expression DIVIDE expression .)
    EQUAL           reduce using rule 16 (expression -> expression DIVIDE expression .)
    NOT_EQUAL       reduce using rule 16 (expression -> expression DIVIDE expression .)
    GREATER         reduce using rule 16 (expression -> expression DIVIDE expression .)
    LESS            reduce using rule 16 (expression -> expression DIVIDE expression .)
    GREATER_EQUAL   reduce using rule 16 (expression -> expression DIVIDE expression .)
    LESS_EQUAL      reduce using rule 16 (expression -> expression DIVIDE expression .)
    R_PARENTHESIS   reduce using rule 16 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 16 (expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 16 (expression -> expression DIVIDE expression .)
    R_BRACKET       reduce using rule 16 (expression -> expression DIVIDE expression .)
    L_BRACE         reduce using rule 16 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 16 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 16 (expression -> expression DIVIDE expression .)
    TO              reduce using rule 16 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 80 ]
  ! MINUS           [ shift and go to state 81 ]
  ! TIMES           [ shift and go to state 82 ]
  ! DIVIDE          [ shift and go to state 83 ]
  ! MODULO          [ shift and go to state 84 ]


state 126

    (17) expression -> expression MODULO expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . TIMES expression
    (16) expression -> expression . DIVIDE expression
    (17) expression -> expression . MODULO expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
    EQUAL           reduce using rule 17 (expression -> expression MODULO expression .)
    NOT_EQUAL       reduce using rule 17 (expression -> expression MODULO expression .)
    GREATER         reduce using rule 17 (expression -> expression MODULO expression .)
    LESS            reduce using rule 17 (expression -> expression MODULO expression .)
    GREATER_EQUAL   reduce using rule 17 (expression -> expression MODULO expression .)
    LESS_EQUAL      reduce using rule 17 (expression -> expression MODULO expression .)
    R_PARENTHESIS   reduce using rule 17 (expression -> expression MODULO expression .)
    COMMA           reduce using rule 17 (expression -> expression MODULO expression .)
    SEMICOLON       reduce using rule 17 (expression -> expression MODULO expression .)
    R_BRACKET       reduce using rule 17 (expression -> expression MODULO expression .)
    L_BRACE         reduce using rule 17 (expression -> expression MODULO expression .)
    AND             reduce using rule 17 (expression -> expression MODULO expression .)
    OR              reduce using rule 17 (expression -> expression MODULO expression .)
    TO              reduce using rule 17 (expression -> expression MODULO expression .)
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    TIMES           shift and go to state 82
    DIVIDE          shift and go to state 83
    MODULO          shift and go to state 84

  ! PLUS            [ reduce using rule 17 (expression -> expression MODULO expression .) ]
  ! MINUS           [ reduce using rule 17 (expression -> expression MODULO expression .) ]
  ! TIMES           [ reduce using rule 17 (expression -> expression MODULO expression .) ]
  ! DIVIDE          [ reduce using rule 17 (expression -> expression MODULO expression .) ]
  ! MODULO          [ reduce using rule 17 (expression -> expression MODULO expression .) ]


state 127

    (34) expression_string -> NAME array_index array_index .

    EQUAL           reduce using rule 34 (expression_string -> NAME array_index array_index .)
    NOT_EQUAL       reduce using rule 34 (expression_string -> NAME array_index array_index .)
    GREATER         reduce using rule 34 (expression_string -> NAME array_index array_index .)
    LESS            reduce using rule 34 (expression_string -> NAME array_index array_index .)
    GREATER_EQUAL   reduce using rule 34 (expression_string -> NAME array_index array_index .)
    LESS_EQUAL      reduce using rule 34 (expression_string -> NAME array_index array_index .)
    SEMICOLON       reduce using rule 34 (expression_string -> NAME array_index array_index .)
    R_PARENTHESIS   reduce using rule 34 (expression_string -> NAME array_index array_index .)
    COMMA           reduce using rule 34 (expression_string -> NAME array_index array_index .)
    R_BRACKET       reduce using rule 34 (expression_string -> NAME array_index array_index .)
    L_BRACE         reduce using rule 34 (expression_string -> NAME array_index array_index .)
    AND             reduce using rule 34 (expression_string -> NAME array_index array_index .)
    OR              reduce using rule 34 (expression_string -> NAME array_index array_index .)


state 128

    (50) else -> ELSE L_BRACE statements R_BRACE .

    FOR             reduce using rule 50 (else -> ELSE L_BRACE statements R_BRACE .)
    FUNCTION        reduce using rule 50 (else -> ELSE L_BRACE statements R_BRACE .)
    NAME            reduce using rule 50 (else -> ELSE L_BRACE statements R_BRACE .)
    PRINT           reduce using rule 50 (else -> ELSE L_BRACE statements R_BRACE .)
    IF              reduce using rule 50 (else -> ELSE L_BRACE statements R_BRACE .)
    WHILE           reduce using rule 50 (else -> ELSE L_BRACE statements R_BRACE .)
    $end            reduce using rule 50 (else -> ELSE L_BRACE statements R_BRACE .)
    R_BRACE         reduce using rule 50 (else -> ELSE L_BRACE statements R_BRACE .)
    RETURN          reduce using rule 50 (else -> ELSE L_BRACE statements R_BRACE .)


state 129

    (51) elif -> ELIF L_PARENTHESIS booleans R_PARENTHESIS . L_BRACE statements R_BRACE

    L_BRACE         shift and go to state 146


state 130

    (61) statement -> FOR L_PARENTHESIS NAME EQUALS expression . TO expression COMMA STEP EQUALS expression R_PARENTHESIS L_BRACE statements R_BRACE
    (62) statement -> FOR L_PARENTHESIS NAME EQUALS expression . TO expression R_PARENTHESIS L_BRACE statements R_BRACE
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . TIMES expression
    (16) expression -> expression . DIVIDE expression
    (17) expression -> expression . MODULO expression

    TO              shift and go to state 147
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    TIMES           shift and go to state 82
    DIVIDE          shift and go to state 83
    MODULO          shift and go to state 84


state 131

    (72) statement -> NAME L_PARENTHESIS argument_list R_PARENTHESIS SEMICOLON .

    FOR             reduce using rule 72 (statement -> NAME L_PARENTHESIS argument_list R_PARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 72 (statement -> NAME L_PARENTHESIS argument_list R_PARENTHESIS SEMICOLON .)
    NAME            reduce using rule 72 (statement -> NAME L_PARENTHESIS argument_list R_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 72 (statement -> NAME L_PARENTHESIS argument_list R_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 72 (statement -> NAME L_PARENTHESIS argument_list R_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 72 (statement -> NAME L_PARENTHESIS argument_list R_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 72 (statement -> NAME L_PARENTHESIS argument_list R_PARENTHESIS SEMICOLON .)
    R_BRACE         reduce using rule 72 (statement -> NAME L_PARENTHESIS argument_list R_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 72 (statement -> NAME L_PARENTHESIS argument_list R_PARENTHESIS SEMICOLON .)


state 132

    (64) argument_list -> argument_list COMMA expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . TIMES expression
    (16) expression -> expression . DIVIDE expression
    (17) expression -> expression . MODULO expression

    R_PARENTHESIS   reduce using rule 64 (argument_list -> argument_list COMMA expression .)
    COMMA           reduce using rule 64 (argument_list -> argument_list COMMA expression .)
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    TIMES           shift and go to state 82
    DIVIDE          shift and go to state 83
    MODULO          shift and go to state 84


state 133

    (25) array -> NAME EQUALS L_BRACKET R_BRACKET SEMICOLON .

    FOR             reduce using rule 25 (array -> NAME EQUALS L_BRACKET R_BRACKET SEMICOLON .)
    FUNCTION        reduce using rule 25 (array -> NAME EQUALS L_BRACKET R_BRACKET SEMICOLON .)
    NAME            reduce using rule 25 (array -> NAME EQUALS L_BRACKET R_BRACKET SEMICOLON .)
    PRINT           reduce using rule 25 (array -> NAME EQUALS L_BRACKET R_BRACKET SEMICOLON .)
    IF              reduce using rule 25 (array -> NAME EQUALS L_BRACKET R_BRACKET SEMICOLON .)
    WHILE           reduce using rule 25 (array -> NAME EQUALS L_BRACKET R_BRACKET SEMICOLON .)
    $end            reduce using rule 25 (array -> NAME EQUALS L_BRACKET R_BRACKET SEMICOLON .)
    R_BRACE         reduce using rule 25 (array -> NAME EQUALS L_BRACKET R_BRACKET SEMICOLON .)
    RETURN          reduce using rule 25 (array -> NAME EQUALS L_BRACKET R_BRACKET SEMICOLON .)


state 134

    (27) array_content -> L_BRACKET elements R_BRACKET .

    SEMICOLON       reduce using rule 27 (array_content -> L_BRACKET elements R_BRACKET .)
    COMMA           reduce using rule 27 (array_content -> L_BRACKET elements R_BRACKET .)
    R_BRACKET       reduce using rule 27 (array_content -> L_BRACKET elements R_BRACKET .)


state 135

    (28) elements -> element COMMA . elements
    (28) elements -> . element COMMA elements
    (29) elements -> . element
    (30) element -> . expression_string
    (31) element -> . array_content
    (8) expression_string -> . expression
    (9) expression_string -> . STRING
    (10) expression_string -> . boolean
    (33) expression_string -> . NAME array_index
    (34) expression_string -> . NAME array_index array_index
    (27) array_content -> . L_BRACKET elements R_BRACKET
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression TIMES expression
    (16) expression -> . expression DIVIDE expression
    (17) expression -> . expression MODULO expression
    (18) expression -> . term
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (44) boolean -> . expression_string EQUAL expression_string
    (45) boolean -> . expression_string NOT_EQUAL expression_string
    (46) boolean -> . expression_string GREATER expression_string
    (47) boolean -> . expression_string LESS expression_string
    (48) boolean -> . expression_string GREATER_EQUAL expression_string
    (49) boolean -> . expression_string LESS_EQUAL expression_string
    (19) term -> . factor
    (20) term -> . NAME
    (21) factor -> . NUMBER
    (23) factor -> . uminus
    (22) uminus -> . MINUS NUMBER

    STRING          shift and go to state 38
    NAME            shift and go to state 39
    L_BRACKET       shift and go to state 95
    L_PARENTHESIS   shift and go to state 51
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    NUMBER          shift and go to state 43
    MINUS           shift and go to state 40

    element                        shift and go to state 98
    elements                       shift and go to state 148
    expression_string              shift and go to state 99
    array_content                  shift and go to state 100
    expression                     shift and go to state 37
    boolean                        shift and go to state 58
    term                           shift and go to state 41
    factor                         shift and go to state 42
    uminus                         shift and go to state 44

state 136

    (37) change_element_array -> NAME array_index array_index EQUALS element . SEMICOLON

    SEMICOLON       shift and go to state 149


state 137

    (36) change_element_array -> NAME array_index EQUALS element SEMICOLON .

    FOR             reduce using rule 36 (change_element_array -> NAME array_index EQUALS element SEMICOLON .)
    FUNCTION        reduce using rule 36 (change_element_array -> NAME array_index EQUALS element SEMICOLON .)
    NAME            reduce using rule 36 (change_element_array -> NAME array_index EQUALS element SEMICOLON .)
    PRINT           reduce using rule 36 (change_element_array -> NAME array_index EQUALS element SEMICOLON .)
    IF              reduce using rule 36 (change_element_array -> NAME array_index EQUALS element SEMICOLON .)
    WHILE           reduce using rule 36 (change_element_array -> NAME array_index EQUALS element SEMICOLON .)
    $end            reduce using rule 36 (change_element_array -> NAME array_index EQUALS element SEMICOLON .)
    R_BRACE         reduce using rule 36 (change_element_array -> NAME array_index EQUALS element SEMICOLON .)
    RETURN          reduce using rule 36 (change_element_array -> NAME array_index EQUALS element SEMICOLON .)


state 138

    (68) statement -> FUNCTION NAME L_BRACE statements R_BRACE .

    FOR             reduce using rule 68 (statement -> FUNCTION NAME L_BRACE statements R_BRACE .)
    FUNCTION        reduce using rule 68 (statement -> FUNCTION NAME L_BRACE statements R_BRACE .)
    NAME            reduce using rule 68 (statement -> FUNCTION NAME L_BRACE statements R_BRACE .)
    PRINT           reduce using rule 68 (statement -> FUNCTION NAME L_BRACE statements R_BRACE .)
    IF              reduce using rule 68 (statement -> FUNCTION NAME L_BRACE statements R_BRACE .)
    WHILE           reduce using rule 68 (statement -> FUNCTION NAME L_BRACE statements R_BRACE .)
    $end            reduce using rule 68 (statement -> FUNCTION NAME L_BRACE statements R_BRACE .)
    R_BRACE         reduce using rule 68 (statement -> FUNCTION NAME L_BRACE statements R_BRACE .)
    RETURN          reduce using rule 68 (statement -> FUNCTION NAME L_BRACE statements R_BRACE .)


state 139

    (69) statement -> FUNCTION NAME L_BRACE statements return . R_BRACE

    R_BRACE         shift and go to state 150


state 140

    (74) return -> RETURN . L_PARENTHESIS expression R_PARENTHESIS SEMICOLON

    L_PARENTHESIS   shift and go to state 151


state 141

    (70) statement -> FUNCTION NAME LESS parameter_list GREATER . L_BRACE statements R_BRACE
    (71) statement -> FUNCTION NAME LESS parameter_list GREATER . L_BRACE statements return R_BRACE

    L_BRACE         shift and go to state 152


state 142

    (67) parameter_list -> parameter_list COMMA . parameter
    (65) parameter -> . NAME

    NAME            shift and go to state 106

    parameter                      shift and go to state 153

state 143

    (11) print -> PRINT L_PARENTHESIS expression_string R_PARENTHESIS SEMICOLON .

    FOR             reduce using rule 11 (print -> PRINT L_PARENTHESIS expression_string R_PARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 11 (print -> PRINT L_PARENTHESIS expression_string R_PARENTHESIS SEMICOLON .)
    NAME            reduce using rule 11 (print -> PRINT L_PARENTHESIS expression_string R_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 11 (print -> PRINT L_PARENTHESIS expression_string R_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 11 (print -> PRINT L_PARENTHESIS expression_string R_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 11 (print -> PRINT L_PARENTHESIS expression_string R_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 11 (print -> PRINT L_PARENTHESIS expression_string R_PARENTHESIS SEMICOLON .)
    R_BRACE         reduce using rule 11 (print -> PRINT L_PARENTHESIS expression_string R_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 11 (print -> PRINT L_PARENTHESIS expression_string R_PARENTHESIS SEMICOLON .)


state 144

    (54) if -> IF L_PARENTHESIS booleans R_PARENTHESIS L_BRACE . statements R_BRACE
    (1) statements -> . statements statement
    (2) statements -> . statement
    (3) statement -> . assignement
    (4) statement -> . print
    (55) statement -> . if
    (56) statement -> . if elifs
    (57) statement -> . if elifs else
    (58) statement -> . if else
    (59) statement -> . loop_while
    (61) statement -> . FOR L_PARENTHESIS NAME EQUALS expression TO expression COMMA STEP EQUALS expression R_PARENTHESIS L_BRACE statements R_BRACE
    (62) statement -> . FOR L_PARENTHESIS NAME EQUALS expression TO expression R_PARENTHESIS L_BRACE statements R_BRACE
    (68) statement -> . FUNCTION NAME L_BRACE statements R_BRACE
    (69) statement -> . FUNCTION NAME L_BRACE statements return R_BRACE
    (70) statement -> . FUNCTION NAME LESS parameter_list GREATER L_BRACE statements R_BRACE
    (71) statement -> . FUNCTION NAME LESS parameter_list GREATER L_BRACE statements return R_BRACE
    (72) statement -> . NAME L_PARENTHESIS argument_list R_PARENTHESIS SEMICOLON
    (73) statement -> . NAME L_PARENTHESIS R_PARENTHESIS SEMICOLON
    (5) assignement -> . NAME EQUALS expression_string SEMICOLON
    (6) assignement -> . NAME INCREMENT SEMICOLON
    (7) assignement -> . NAME DECREMENT SEMICOLON
    (24) assignement -> . array
    (35) assignement -> . change_element_array
    (11) print -> . PRINT L_PARENTHESIS expression_string R_PARENTHESIS SEMICOLON
    (54) if -> . IF L_PARENTHESIS booleans R_PARENTHESIS L_BRACE statements R_BRACE
    (60) loop_while -> . WHILE booleans L_BRACE statements R_BRACE
    (25) array -> . NAME EQUALS L_BRACKET R_BRACKET SEMICOLON
    (26) array -> . NAME EQUALS array_content SEMICOLON
    (36) change_element_array -> . NAME array_index EQUALS element SEMICOLON
    (37) change_element_array -> . NAME array_index array_index EQUALS element SEMICOLON

    FOR             shift and go to state 7
    FUNCTION        shift and go to state 9
    NAME            shift and go to state 8
    PRINT           shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 14

    statements                     shift and go to state 154
    statement                      shift and go to state 2
    assignement                    shift and go to state 3
    print                          shift and go to state 4
    if                             shift and go to state 5
    loop_while                     shift and go to state 6
    array                          shift and go to state 10
    change_element_array           shift and go to state 11

state 145

    (60) loop_while -> WHILE booleans L_BRACE statements R_BRACE .

    FOR             reduce using rule 60 (loop_while -> WHILE booleans L_BRACE statements R_BRACE .)
    FUNCTION        reduce using rule 60 (loop_while -> WHILE booleans L_BRACE statements R_BRACE .)
    NAME            reduce using rule 60 (loop_while -> WHILE booleans L_BRACE statements R_BRACE .)
    PRINT           reduce using rule 60 (loop_while -> WHILE booleans L_BRACE statements R_BRACE .)
    IF              reduce using rule 60 (loop_while -> WHILE booleans L_BRACE statements R_BRACE .)
    WHILE           reduce using rule 60 (loop_while -> WHILE booleans L_BRACE statements R_BRACE .)
    $end            reduce using rule 60 (loop_while -> WHILE booleans L_BRACE statements R_BRACE .)
    R_BRACE         reduce using rule 60 (loop_while -> WHILE booleans L_BRACE statements R_BRACE .)
    RETURN          reduce using rule 60 (loop_while -> WHILE booleans L_BRACE statements R_BRACE .)


state 146

    (51) elif -> ELIF L_PARENTHESIS booleans R_PARENTHESIS L_BRACE . statements R_BRACE
    (1) statements -> . statements statement
    (2) statements -> . statement
    (3) statement -> . assignement
    (4) statement -> . print
    (55) statement -> . if
    (56) statement -> . if elifs
    (57) statement -> . if elifs else
    (58) statement -> . if else
    (59) statement -> . loop_while
    (61) statement -> . FOR L_PARENTHESIS NAME EQUALS expression TO expression COMMA STEP EQUALS expression R_PARENTHESIS L_BRACE statements R_BRACE
    (62) statement -> . FOR L_PARENTHESIS NAME EQUALS expression TO expression R_PARENTHESIS L_BRACE statements R_BRACE
    (68) statement -> . FUNCTION NAME L_BRACE statements R_BRACE
    (69) statement -> . FUNCTION NAME L_BRACE statements return R_BRACE
    (70) statement -> . FUNCTION NAME LESS parameter_list GREATER L_BRACE statements R_BRACE
    (71) statement -> . FUNCTION NAME LESS parameter_list GREATER L_BRACE statements return R_BRACE
    (72) statement -> . NAME L_PARENTHESIS argument_list R_PARENTHESIS SEMICOLON
    (73) statement -> . NAME L_PARENTHESIS R_PARENTHESIS SEMICOLON
    (5) assignement -> . NAME EQUALS expression_string SEMICOLON
    (6) assignement -> . NAME INCREMENT SEMICOLON
    (7) assignement -> . NAME DECREMENT SEMICOLON
    (24) assignement -> . array
    (35) assignement -> . change_element_array
    (11) print -> . PRINT L_PARENTHESIS expression_string R_PARENTHESIS SEMICOLON
    (54) if -> . IF L_PARENTHESIS booleans R_PARENTHESIS L_BRACE statements R_BRACE
    (60) loop_while -> . WHILE booleans L_BRACE statements R_BRACE
    (25) array -> . NAME EQUALS L_BRACKET R_BRACKET SEMICOLON
    (26) array -> . NAME EQUALS array_content SEMICOLON
    (36) change_element_array -> . NAME array_index EQUALS element SEMICOLON
    (37) change_element_array -> . NAME array_index array_index EQUALS element SEMICOLON

    FOR             shift and go to state 7
    FUNCTION        shift and go to state 9
    NAME            shift and go to state 8
    PRINT           shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 14

    statements                     shift and go to state 155
    statement                      shift and go to state 2
    assignement                    shift and go to state 3
    print                          shift and go to state 4
    if                             shift and go to state 5
    loop_while                     shift and go to state 6
    array                          shift and go to state 10
    change_element_array           shift and go to state 11

state 147

    (61) statement -> FOR L_PARENTHESIS NAME EQUALS expression TO . expression COMMA STEP EQUALS expression R_PARENTHESIS L_BRACE statements R_BRACE
    (62) statement -> FOR L_PARENTHESIS NAME EQUALS expression TO . expression R_PARENTHESIS L_BRACE statements R_BRACE
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression TIMES expression
    (16) expression -> . expression DIVIDE expression
    (17) expression -> . expression MODULO expression
    (18) expression -> . term
    (19) term -> . factor
    (20) term -> . NAME
    (21) factor -> . NUMBER
    (23) factor -> . uminus
    (22) uminus -> . MINUS NUMBER

    L_PARENTHESIS   shift and go to state 51
    NAME            shift and go to state 50
    NUMBER          shift and go to state 43
    MINUS           shift and go to state 40

    expression                     shift and go to state 156
    term                           shift and go to state 41
    factor                         shift and go to state 42
    uminus                         shift and go to state 44

state 148

    (28) elements -> element COMMA elements .

    R_BRACKET       reduce using rule 28 (elements -> element COMMA elements .)


state 149

    (37) change_element_array -> NAME array_index array_index EQUALS element SEMICOLON .

    FOR             reduce using rule 37 (change_element_array -> NAME array_index array_index EQUALS element SEMICOLON .)
    FUNCTION        reduce using rule 37 (change_element_array -> NAME array_index array_index EQUALS element SEMICOLON .)
    NAME            reduce using rule 37 (change_element_array -> NAME array_index array_index EQUALS element SEMICOLON .)
    PRINT           reduce using rule 37 (change_element_array -> NAME array_index array_index EQUALS element SEMICOLON .)
    IF              reduce using rule 37 (change_element_array -> NAME array_index array_index EQUALS element SEMICOLON .)
    WHILE           reduce using rule 37 (change_element_array -> NAME array_index array_index EQUALS element SEMICOLON .)
    $end            reduce using rule 37 (change_element_array -> NAME array_index array_index EQUALS element SEMICOLON .)
    R_BRACE         reduce using rule 37 (change_element_array -> NAME array_index array_index EQUALS element SEMICOLON .)
    RETURN          reduce using rule 37 (change_element_array -> NAME array_index array_index EQUALS element SEMICOLON .)


state 150

    (69) statement -> FUNCTION NAME L_BRACE statements return R_BRACE .

    FOR             reduce using rule 69 (statement -> FUNCTION NAME L_BRACE statements return R_BRACE .)
    FUNCTION        reduce using rule 69 (statement -> FUNCTION NAME L_BRACE statements return R_BRACE .)
    NAME            reduce using rule 69 (statement -> FUNCTION NAME L_BRACE statements return R_BRACE .)
    PRINT           reduce using rule 69 (statement -> FUNCTION NAME L_BRACE statements return R_BRACE .)
    IF              reduce using rule 69 (statement -> FUNCTION NAME L_BRACE statements return R_BRACE .)
    WHILE           reduce using rule 69 (statement -> FUNCTION NAME L_BRACE statements return R_BRACE .)
    $end            reduce using rule 69 (statement -> FUNCTION NAME L_BRACE statements return R_BRACE .)
    R_BRACE         reduce using rule 69 (statement -> FUNCTION NAME L_BRACE statements return R_BRACE .)
    RETURN          reduce using rule 69 (statement -> FUNCTION NAME L_BRACE statements return R_BRACE .)


state 151

    (74) return -> RETURN L_PARENTHESIS . expression R_PARENTHESIS SEMICOLON
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression TIMES expression
    (16) expression -> . expression DIVIDE expression
    (17) expression -> . expression MODULO expression
    (18) expression -> . term
    (19) term -> . factor
    (20) term -> . NAME
    (21) factor -> . NUMBER
    (23) factor -> . uminus
    (22) uminus -> . MINUS NUMBER

    L_PARENTHESIS   shift and go to state 51
    NAME            shift and go to state 50
    NUMBER          shift and go to state 43
    MINUS           shift and go to state 40

    expression                     shift and go to state 157
    term                           shift and go to state 41
    factor                         shift and go to state 42
    uminus                         shift and go to state 44

state 152

    (70) statement -> FUNCTION NAME LESS parameter_list GREATER L_BRACE . statements R_BRACE
    (71) statement -> FUNCTION NAME LESS parameter_list GREATER L_BRACE . statements return R_BRACE
    (1) statements -> . statements statement
    (2) statements -> . statement
    (3) statement -> . assignement
    (4) statement -> . print
    (55) statement -> . if
    (56) statement -> . if elifs
    (57) statement -> . if elifs else
    (58) statement -> . if else
    (59) statement -> . loop_while
    (61) statement -> . FOR L_PARENTHESIS NAME EQUALS expression TO expression COMMA STEP EQUALS expression R_PARENTHESIS L_BRACE statements R_BRACE
    (62) statement -> . FOR L_PARENTHESIS NAME EQUALS expression TO expression R_PARENTHESIS L_BRACE statements R_BRACE
    (68) statement -> . FUNCTION NAME L_BRACE statements R_BRACE
    (69) statement -> . FUNCTION NAME L_BRACE statements return R_BRACE
    (70) statement -> . FUNCTION NAME LESS parameter_list GREATER L_BRACE statements R_BRACE
    (71) statement -> . FUNCTION NAME LESS parameter_list GREATER L_BRACE statements return R_BRACE
    (72) statement -> . NAME L_PARENTHESIS argument_list R_PARENTHESIS SEMICOLON
    (73) statement -> . NAME L_PARENTHESIS R_PARENTHESIS SEMICOLON
    (5) assignement -> . NAME EQUALS expression_string SEMICOLON
    (6) assignement -> . NAME INCREMENT SEMICOLON
    (7) assignement -> . NAME DECREMENT SEMICOLON
    (24) assignement -> . array
    (35) assignement -> . change_element_array
    (11) print -> . PRINT L_PARENTHESIS expression_string R_PARENTHESIS SEMICOLON
    (54) if -> . IF L_PARENTHESIS booleans R_PARENTHESIS L_BRACE statements R_BRACE
    (60) loop_while -> . WHILE booleans L_BRACE statements R_BRACE
    (25) array -> . NAME EQUALS L_BRACKET R_BRACKET SEMICOLON
    (26) array -> . NAME EQUALS array_content SEMICOLON
    (36) change_element_array -> . NAME array_index EQUALS element SEMICOLON
    (37) change_element_array -> . NAME array_index array_index EQUALS element SEMICOLON

    FOR             shift and go to state 7
    FUNCTION        shift and go to state 9
    NAME            shift and go to state 8
    PRINT           shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 14

    statements                     shift and go to state 158
    statement                      shift and go to state 2
    assignement                    shift and go to state 3
    print                          shift and go to state 4
    if                             shift and go to state 5
    loop_while                     shift and go to state 6
    array                          shift and go to state 10
    change_element_array           shift and go to state 11

state 153

    (67) parameter_list -> parameter_list COMMA parameter .

    GREATER         reduce using rule 67 (parameter_list -> parameter_list COMMA parameter .)
    COMMA           reduce using rule 67 (parameter_list -> parameter_list COMMA parameter .)


state 154

    (54) if -> IF L_PARENTHESIS booleans R_PARENTHESIS L_BRACE statements . R_BRACE
    (1) statements -> statements . statement
    (3) statement -> . assignement
    (4) statement -> . print
    (55) statement -> . if
    (56) statement -> . if elifs
    (57) statement -> . if elifs else
    (58) statement -> . if else
    (59) statement -> . loop_while
    (61) statement -> . FOR L_PARENTHESIS NAME EQUALS expression TO expression COMMA STEP EQUALS expression R_PARENTHESIS L_BRACE statements R_BRACE
    (62) statement -> . FOR L_PARENTHESIS NAME EQUALS expression TO expression R_PARENTHESIS L_BRACE statements R_BRACE
    (68) statement -> . FUNCTION NAME L_BRACE statements R_BRACE
    (69) statement -> . FUNCTION NAME L_BRACE statements return R_BRACE
    (70) statement -> . FUNCTION NAME LESS parameter_list GREATER L_BRACE statements R_BRACE
    (71) statement -> . FUNCTION NAME LESS parameter_list GREATER L_BRACE statements return R_BRACE
    (72) statement -> . NAME L_PARENTHESIS argument_list R_PARENTHESIS SEMICOLON
    (73) statement -> . NAME L_PARENTHESIS R_PARENTHESIS SEMICOLON
    (5) assignement -> . NAME EQUALS expression_string SEMICOLON
    (6) assignement -> . NAME INCREMENT SEMICOLON
    (7) assignement -> . NAME DECREMENT SEMICOLON
    (24) assignement -> . array
    (35) assignement -> . change_element_array
    (11) print -> . PRINT L_PARENTHESIS expression_string R_PARENTHESIS SEMICOLON
    (54) if -> . IF L_PARENTHESIS booleans R_PARENTHESIS L_BRACE statements R_BRACE
    (60) loop_while -> . WHILE booleans L_BRACE statements R_BRACE
    (25) array -> . NAME EQUALS L_BRACKET R_BRACKET SEMICOLON
    (26) array -> . NAME EQUALS array_content SEMICOLON
    (36) change_element_array -> . NAME array_index EQUALS element SEMICOLON
    (37) change_element_array -> . NAME array_index array_index EQUALS element SEMICOLON

    R_BRACE         shift and go to state 159
    FOR             shift and go to state 7
    FUNCTION        shift and go to state 9
    NAME            shift and go to state 8
    PRINT           shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 14

    statement                      shift and go to state 15
    assignement                    shift and go to state 3
    print                          shift and go to state 4
    if                             shift and go to state 5
    loop_while                     shift and go to state 6
    array                          shift and go to state 10
    change_element_array           shift and go to state 11

state 155

    (51) elif -> ELIF L_PARENTHESIS booleans R_PARENTHESIS L_BRACE statements . R_BRACE
    (1) statements -> statements . statement
    (3) statement -> . assignement
    (4) statement -> . print
    (55) statement -> . if
    (56) statement -> . if elifs
    (57) statement -> . if elifs else
    (58) statement -> . if else
    (59) statement -> . loop_while
    (61) statement -> . FOR L_PARENTHESIS NAME EQUALS expression TO expression COMMA STEP EQUALS expression R_PARENTHESIS L_BRACE statements R_BRACE
    (62) statement -> . FOR L_PARENTHESIS NAME EQUALS expression TO expression R_PARENTHESIS L_BRACE statements R_BRACE
    (68) statement -> . FUNCTION NAME L_BRACE statements R_BRACE
    (69) statement -> . FUNCTION NAME L_BRACE statements return R_BRACE
    (70) statement -> . FUNCTION NAME LESS parameter_list GREATER L_BRACE statements R_BRACE
    (71) statement -> . FUNCTION NAME LESS parameter_list GREATER L_BRACE statements return R_BRACE
    (72) statement -> . NAME L_PARENTHESIS argument_list R_PARENTHESIS SEMICOLON
    (73) statement -> . NAME L_PARENTHESIS R_PARENTHESIS SEMICOLON
    (5) assignement -> . NAME EQUALS expression_string SEMICOLON
    (6) assignement -> . NAME INCREMENT SEMICOLON
    (7) assignement -> . NAME DECREMENT SEMICOLON
    (24) assignement -> . array
    (35) assignement -> . change_element_array
    (11) print -> . PRINT L_PARENTHESIS expression_string R_PARENTHESIS SEMICOLON
    (54) if -> . IF L_PARENTHESIS booleans R_PARENTHESIS L_BRACE statements R_BRACE
    (60) loop_while -> . WHILE booleans L_BRACE statements R_BRACE
    (25) array -> . NAME EQUALS L_BRACKET R_BRACKET SEMICOLON
    (26) array -> . NAME EQUALS array_content SEMICOLON
    (36) change_element_array -> . NAME array_index EQUALS element SEMICOLON
    (37) change_element_array -> . NAME array_index array_index EQUALS element SEMICOLON

    R_BRACE         shift and go to state 160
    FOR             shift and go to state 7
    FUNCTION        shift and go to state 9
    NAME            shift and go to state 8
    PRINT           shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 14

    statement                      shift and go to state 15
    assignement                    shift and go to state 3
    print                          shift and go to state 4
    if                             shift and go to state 5
    loop_while                     shift and go to state 6
    array                          shift and go to state 10
    change_element_array           shift and go to state 11

state 156

    (61) statement -> FOR L_PARENTHESIS NAME EQUALS expression TO expression . COMMA STEP EQUALS expression R_PARENTHESIS L_BRACE statements R_BRACE
    (62) statement -> FOR L_PARENTHESIS NAME EQUALS expression TO expression . R_PARENTHESIS L_BRACE statements R_BRACE
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . TIMES expression
    (16) expression -> expression . DIVIDE expression
    (17) expression -> expression . MODULO expression

    COMMA           shift and go to state 161
    R_PARENTHESIS   shift and go to state 162
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    TIMES           shift and go to state 82
    DIVIDE          shift and go to state 83
    MODULO          shift and go to state 84


state 157

    (74) return -> RETURN L_PARENTHESIS expression . R_PARENTHESIS SEMICOLON
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . TIMES expression
    (16) expression -> expression . DIVIDE expression
    (17) expression -> expression . MODULO expression

    R_PARENTHESIS   shift and go to state 163
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    TIMES           shift and go to state 82
    DIVIDE          shift and go to state 83
    MODULO          shift and go to state 84


state 158

    (70) statement -> FUNCTION NAME LESS parameter_list GREATER L_BRACE statements . R_BRACE
    (71) statement -> FUNCTION NAME LESS parameter_list GREATER L_BRACE statements . return R_BRACE
    (1) statements -> statements . statement
    (74) return -> . RETURN L_PARENTHESIS expression R_PARENTHESIS SEMICOLON
    (3) statement -> . assignement
    (4) statement -> . print
    (55) statement -> . if
    (56) statement -> . if elifs
    (57) statement -> . if elifs else
    (58) statement -> . if else
    (59) statement -> . loop_while
    (61) statement -> . FOR L_PARENTHESIS NAME EQUALS expression TO expression COMMA STEP EQUALS expression R_PARENTHESIS L_BRACE statements R_BRACE
    (62) statement -> . FOR L_PARENTHESIS NAME EQUALS expression TO expression R_PARENTHESIS L_BRACE statements R_BRACE
    (68) statement -> . FUNCTION NAME L_BRACE statements R_BRACE
    (69) statement -> . FUNCTION NAME L_BRACE statements return R_BRACE
    (70) statement -> . FUNCTION NAME LESS parameter_list GREATER L_BRACE statements R_BRACE
    (71) statement -> . FUNCTION NAME LESS parameter_list GREATER L_BRACE statements return R_BRACE
    (72) statement -> . NAME L_PARENTHESIS argument_list R_PARENTHESIS SEMICOLON
    (73) statement -> . NAME L_PARENTHESIS R_PARENTHESIS SEMICOLON
    (5) assignement -> . NAME EQUALS expression_string SEMICOLON
    (6) assignement -> . NAME INCREMENT SEMICOLON
    (7) assignement -> . NAME DECREMENT SEMICOLON
    (24) assignement -> . array
    (35) assignement -> . change_element_array
    (11) print -> . PRINT L_PARENTHESIS expression_string R_PARENTHESIS SEMICOLON
    (54) if -> . IF L_PARENTHESIS booleans R_PARENTHESIS L_BRACE statements R_BRACE
    (60) loop_while -> . WHILE booleans L_BRACE statements R_BRACE
    (25) array -> . NAME EQUALS L_BRACKET R_BRACKET SEMICOLON
    (26) array -> . NAME EQUALS array_content SEMICOLON
    (36) change_element_array -> . NAME array_index EQUALS element SEMICOLON
    (37) change_element_array -> . NAME array_index array_index EQUALS element SEMICOLON

    R_BRACE         shift and go to state 164
    RETURN          shift and go to state 140
    FOR             shift and go to state 7
    FUNCTION        shift and go to state 9
    NAME            shift and go to state 8
    PRINT           shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 14

    return                         shift and go to state 165
    statement                      shift and go to state 15
    assignement                    shift and go to state 3
    print                          shift and go to state 4
    if                             shift and go to state 5
    loop_while                     shift and go to state 6
    array                          shift and go to state 10
    change_element_array           shift and go to state 11

state 159

    (54) if -> IF L_PARENTHESIS booleans R_PARENTHESIS L_BRACE statements R_BRACE .

    ELSE            reduce using rule 54 (if -> IF L_PARENTHESIS booleans R_PARENTHESIS L_BRACE statements R_BRACE .)
    ELIF            reduce using rule 54 (if -> IF L_PARENTHESIS booleans R_PARENTHESIS L_BRACE statements R_BRACE .)
    FOR             reduce using rule 54 (if -> IF L_PARENTHESIS booleans R_PARENTHESIS L_BRACE statements R_BRACE .)
    FUNCTION        reduce using rule 54 (if -> IF L_PARENTHESIS booleans R_PARENTHESIS L_BRACE statements R_BRACE .)
    NAME            reduce using rule 54 (if -> IF L_PARENTHESIS booleans R_PARENTHESIS L_BRACE statements R_BRACE .)
    PRINT           reduce using rule 54 (if -> IF L_PARENTHESIS booleans R_PARENTHESIS L_BRACE statements R_BRACE .)
    IF              reduce using rule 54 (if -> IF L_PARENTHESIS booleans R_PARENTHESIS L_BRACE statements R_BRACE .)
    WHILE           reduce using rule 54 (if -> IF L_PARENTHESIS booleans R_PARENTHESIS L_BRACE statements R_BRACE .)
    $end            reduce using rule 54 (if -> IF L_PARENTHESIS booleans R_PARENTHESIS L_BRACE statements R_BRACE .)
    R_BRACE         reduce using rule 54 (if -> IF L_PARENTHESIS booleans R_PARENTHESIS L_BRACE statements R_BRACE .)
    RETURN          reduce using rule 54 (if -> IF L_PARENTHESIS booleans R_PARENTHESIS L_BRACE statements R_BRACE .)


state 160

    (51) elif -> ELIF L_PARENTHESIS booleans R_PARENTHESIS L_BRACE statements R_BRACE .

    ELSE            reduce using rule 51 (elif -> ELIF L_PARENTHESIS booleans R_PARENTHESIS L_BRACE statements R_BRACE .)
    ELIF            reduce using rule 51 (elif -> ELIF L_PARENTHESIS booleans R_PARENTHESIS L_BRACE statements R_BRACE .)
    FOR             reduce using rule 51 (elif -> ELIF L_PARENTHESIS booleans R_PARENTHESIS L_BRACE statements R_BRACE .)
    FUNCTION        reduce using rule 51 (elif -> ELIF L_PARENTHESIS booleans R_PARENTHESIS L_BRACE statements R_BRACE .)
    NAME            reduce using rule 51 (elif -> ELIF L_PARENTHESIS booleans R_PARENTHESIS L_BRACE statements R_BRACE .)
    PRINT           reduce using rule 51 (elif -> ELIF L_PARENTHESIS booleans R_PARENTHESIS L_BRACE statements R_BRACE .)
    IF              reduce using rule 51 (elif -> ELIF L_PARENTHESIS booleans R_PARENTHESIS L_BRACE statements R_BRACE .)
    WHILE           reduce using rule 51 (elif -> ELIF L_PARENTHESIS booleans R_PARENTHESIS L_BRACE statements R_BRACE .)
    $end            reduce using rule 51 (elif -> ELIF L_PARENTHESIS booleans R_PARENTHESIS L_BRACE statements R_BRACE .)
    R_BRACE         reduce using rule 51 (elif -> ELIF L_PARENTHESIS booleans R_PARENTHESIS L_BRACE statements R_BRACE .)
    RETURN          reduce using rule 51 (elif -> ELIF L_PARENTHESIS booleans R_PARENTHESIS L_BRACE statements R_BRACE .)


state 161

    (61) statement -> FOR L_PARENTHESIS NAME EQUALS expression TO expression COMMA . STEP EQUALS expression R_PARENTHESIS L_BRACE statements R_BRACE

    STEP            shift and go to state 166


state 162

    (62) statement -> FOR L_PARENTHESIS NAME EQUALS expression TO expression R_PARENTHESIS . L_BRACE statements R_BRACE

    L_BRACE         shift and go to state 167


state 163

    (74) return -> RETURN L_PARENTHESIS expression R_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 168


state 164

    (70) statement -> FUNCTION NAME LESS parameter_list GREATER L_BRACE statements R_BRACE .

    FOR             reduce using rule 70 (statement -> FUNCTION NAME LESS parameter_list GREATER L_BRACE statements R_BRACE .)
    FUNCTION        reduce using rule 70 (statement -> FUNCTION NAME LESS parameter_list GREATER L_BRACE statements R_BRACE .)
    NAME            reduce using rule 70 (statement -> FUNCTION NAME LESS parameter_list GREATER L_BRACE statements R_BRACE .)
    PRINT           reduce using rule 70 (statement -> FUNCTION NAME LESS parameter_list GREATER L_BRACE statements R_BRACE .)
    IF              reduce using rule 70 (statement -> FUNCTION NAME LESS parameter_list GREATER L_BRACE statements R_BRACE .)
    WHILE           reduce using rule 70 (statement -> FUNCTION NAME LESS parameter_list GREATER L_BRACE statements R_BRACE .)
    $end            reduce using rule 70 (statement -> FUNCTION NAME LESS parameter_list GREATER L_BRACE statements R_BRACE .)
    R_BRACE         reduce using rule 70 (statement -> FUNCTION NAME LESS parameter_list GREATER L_BRACE statements R_BRACE .)
    RETURN          reduce using rule 70 (statement -> FUNCTION NAME LESS parameter_list GREATER L_BRACE statements R_BRACE .)


state 165

    (71) statement -> FUNCTION NAME LESS parameter_list GREATER L_BRACE statements return . R_BRACE

    R_BRACE         shift and go to state 169


state 166

    (61) statement -> FOR L_PARENTHESIS NAME EQUALS expression TO expression COMMA STEP . EQUALS expression R_PARENTHESIS L_BRACE statements R_BRACE

    EQUALS          shift and go to state 170


state 167

    (62) statement -> FOR L_PARENTHESIS NAME EQUALS expression TO expression R_PARENTHESIS L_BRACE . statements R_BRACE
    (1) statements -> . statements statement
    (2) statements -> . statement
    (3) statement -> . assignement
    (4) statement -> . print
    (55) statement -> . if
    (56) statement -> . if elifs
    (57) statement -> . if elifs else
    (58) statement -> . if else
    (59) statement -> . loop_while
    (61) statement -> . FOR L_PARENTHESIS NAME EQUALS expression TO expression COMMA STEP EQUALS expression R_PARENTHESIS L_BRACE statements R_BRACE
    (62) statement -> . FOR L_PARENTHESIS NAME EQUALS expression TO expression R_PARENTHESIS L_BRACE statements R_BRACE
    (68) statement -> . FUNCTION NAME L_BRACE statements R_BRACE
    (69) statement -> . FUNCTION NAME L_BRACE statements return R_BRACE
    (70) statement -> . FUNCTION NAME LESS parameter_list GREATER L_BRACE statements R_BRACE
    (71) statement -> . FUNCTION NAME LESS parameter_list GREATER L_BRACE statements return R_BRACE
    (72) statement -> . NAME L_PARENTHESIS argument_list R_PARENTHESIS SEMICOLON
    (73) statement -> . NAME L_PARENTHESIS R_PARENTHESIS SEMICOLON
    (5) assignement -> . NAME EQUALS expression_string SEMICOLON
    (6) assignement -> . NAME INCREMENT SEMICOLON
    (7) assignement -> . NAME DECREMENT SEMICOLON
    (24) assignement -> . array
    (35) assignement -> . change_element_array
    (11) print -> . PRINT L_PARENTHESIS expression_string R_PARENTHESIS SEMICOLON
    (54) if -> . IF L_PARENTHESIS booleans R_PARENTHESIS L_BRACE statements R_BRACE
    (60) loop_while -> . WHILE booleans L_BRACE statements R_BRACE
    (25) array -> . NAME EQUALS L_BRACKET R_BRACKET SEMICOLON
    (26) array -> . NAME EQUALS array_content SEMICOLON
    (36) change_element_array -> . NAME array_index EQUALS element SEMICOLON
    (37) change_element_array -> . NAME array_index array_index EQUALS element SEMICOLON

    FOR             shift and go to state 7
    FUNCTION        shift and go to state 9
    NAME            shift and go to state 8
    PRINT           shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 14

    statements                     shift and go to state 171
    statement                      shift and go to state 2
    assignement                    shift and go to state 3
    print                          shift and go to state 4
    if                             shift and go to state 5
    loop_while                     shift and go to state 6
    array                          shift and go to state 10
    change_element_array           shift and go to state 11

state 168

    (74) return -> RETURN L_PARENTHESIS expression R_PARENTHESIS SEMICOLON .

    R_BRACE         reduce using rule 74 (return -> RETURN L_PARENTHESIS expression R_PARENTHESIS SEMICOLON .)


state 169

    (71) statement -> FUNCTION NAME LESS parameter_list GREATER L_BRACE statements return R_BRACE .

    FOR             reduce using rule 71 (statement -> FUNCTION NAME LESS parameter_list GREATER L_BRACE statements return R_BRACE .)
    FUNCTION        reduce using rule 71 (statement -> FUNCTION NAME LESS parameter_list GREATER L_BRACE statements return R_BRACE .)
    NAME            reduce using rule 71 (statement -> FUNCTION NAME LESS parameter_list GREATER L_BRACE statements return R_BRACE .)
    PRINT           reduce using rule 71 (statement -> FUNCTION NAME LESS parameter_list GREATER L_BRACE statements return R_BRACE .)
    IF              reduce using rule 71 (statement -> FUNCTION NAME LESS parameter_list GREATER L_BRACE statements return R_BRACE .)
    WHILE           reduce using rule 71 (statement -> FUNCTION NAME LESS parameter_list GREATER L_BRACE statements return R_BRACE .)
    $end            reduce using rule 71 (statement -> FUNCTION NAME LESS parameter_list GREATER L_BRACE statements return R_BRACE .)
    R_BRACE         reduce using rule 71 (statement -> FUNCTION NAME LESS parameter_list GREATER L_BRACE statements return R_BRACE .)
    RETURN          reduce using rule 71 (statement -> FUNCTION NAME LESS parameter_list GREATER L_BRACE statements return R_BRACE .)


state 170

    (61) statement -> FOR L_PARENTHESIS NAME EQUALS expression TO expression COMMA STEP EQUALS . expression R_PARENTHESIS L_BRACE statements R_BRACE
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression TIMES expression
    (16) expression -> . expression DIVIDE expression
    (17) expression -> . expression MODULO expression
    (18) expression -> . term
    (19) term -> . factor
    (20) term -> . NAME
    (21) factor -> . NUMBER
    (23) factor -> . uminus
    (22) uminus -> . MINUS NUMBER

    L_PARENTHESIS   shift and go to state 51
    NAME            shift and go to state 50
    NUMBER          shift and go to state 43
    MINUS           shift and go to state 40

    expression                     shift and go to state 172
    term                           shift and go to state 41
    factor                         shift and go to state 42
    uminus                         shift and go to state 44

state 171

    (62) statement -> FOR L_PARENTHESIS NAME EQUALS expression TO expression R_PARENTHESIS L_BRACE statements . R_BRACE
    (1) statements -> statements . statement
    (3) statement -> . assignement
    (4) statement -> . print
    (55) statement -> . if
    (56) statement -> . if elifs
    (57) statement -> . if elifs else
    (58) statement -> . if else
    (59) statement -> . loop_while
    (61) statement -> . FOR L_PARENTHESIS NAME EQUALS expression TO expression COMMA STEP EQUALS expression R_PARENTHESIS L_BRACE statements R_BRACE
    (62) statement -> . FOR L_PARENTHESIS NAME EQUALS expression TO expression R_PARENTHESIS L_BRACE statements R_BRACE
    (68) statement -> . FUNCTION NAME L_BRACE statements R_BRACE
    (69) statement -> . FUNCTION NAME L_BRACE statements return R_BRACE
    (70) statement -> . FUNCTION NAME LESS parameter_list GREATER L_BRACE statements R_BRACE
    (71) statement -> . FUNCTION NAME LESS parameter_list GREATER L_BRACE statements return R_BRACE
    (72) statement -> . NAME L_PARENTHESIS argument_list R_PARENTHESIS SEMICOLON
    (73) statement -> . NAME L_PARENTHESIS R_PARENTHESIS SEMICOLON
    (5) assignement -> . NAME EQUALS expression_string SEMICOLON
    (6) assignement -> . NAME INCREMENT SEMICOLON
    (7) assignement -> . NAME DECREMENT SEMICOLON
    (24) assignement -> . array
    (35) assignement -> . change_element_array
    (11) print -> . PRINT L_PARENTHESIS expression_string R_PARENTHESIS SEMICOLON
    (54) if -> . IF L_PARENTHESIS booleans R_PARENTHESIS L_BRACE statements R_BRACE
    (60) loop_while -> . WHILE booleans L_BRACE statements R_BRACE
    (25) array -> . NAME EQUALS L_BRACKET R_BRACKET SEMICOLON
    (26) array -> . NAME EQUALS array_content SEMICOLON
    (36) change_element_array -> . NAME array_index EQUALS element SEMICOLON
    (37) change_element_array -> . NAME array_index array_index EQUALS element SEMICOLON

    R_BRACE         shift and go to state 173
    FOR             shift and go to state 7
    FUNCTION        shift and go to state 9
    NAME            shift and go to state 8
    PRINT           shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 14

    statement                      shift and go to state 15
    assignement                    shift and go to state 3
    print                          shift and go to state 4
    if                             shift and go to state 5
    loop_while                     shift and go to state 6
    array                          shift and go to state 10
    change_element_array           shift and go to state 11

state 172

    (61) statement -> FOR L_PARENTHESIS NAME EQUALS expression TO expression COMMA STEP EQUALS expression . R_PARENTHESIS L_BRACE statements R_BRACE
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . TIMES expression
    (16) expression -> expression . DIVIDE expression
    (17) expression -> expression . MODULO expression

    R_PARENTHESIS   shift and go to state 174
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    TIMES           shift and go to state 82
    DIVIDE          shift and go to state 83
    MODULO          shift and go to state 84


state 173

    (62) statement -> FOR L_PARENTHESIS NAME EQUALS expression TO expression R_PARENTHESIS L_BRACE statements R_BRACE .

    FOR             reduce using rule 62 (statement -> FOR L_PARENTHESIS NAME EQUALS expression TO expression R_PARENTHESIS L_BRACE statements R_BRACE .)
    FUNCTION        reduce using rule 62 (statement -> FOR L_PARENTHESIS NAME EQUALS expression TO expression R_PARENTHESIS L_BRACE statements R_BRACE .)
    NAME            reduce using rule 62 (statement -> FOR L_PARENTHESIS NAME EQUALS expression TO expression R_PARENTHESIS L_BRACE statements R_BRACE .)
    PRINT           reduce using rule 62 (statement -> FOR L_PARENTHESIS NAME EQUALS expression TO expression R_PARENTHESIS L_BRACE statements R_BRACE .)
    IF              reduce using rule 62 (statement -> FOR L_PARENTHESIS NAME EQUALS expression TO expression R_PARENTHESIS L_BRACE statements R_BRACE .)
    WHILE           reduce using rule 62 (statement -> FOR L_PARENTHESIS NAME EQUALS expression TO expression R_PARENTHESIS L_BRACE statements R_BRACE .)
    $end            reduce using rule 62 (statement -> FOR L_PARENTHESIS NAME EQUALS expression TO expression R_PARENTHESIS L_BRACE statements R_BRACE .)
    R_BRACE         reduce using rule 62 (statement -> FOR L_PARENTHESIS NAME EQUALS expression TO expression R_PARENTHESIS L_BRACE statements R_BRACE .)
    RETURN          reduce using rule 62 (statement -> FOR L_PARENTHESIS NAME EQUALS expression TO expression R_PARENTHESIS L_BRACE statements R_BRACE .)


state 174

    (61) statement -> FOR L_PARENTHESIS NAME EQUALS expression TO expression COMMA STEP EQUALS expression R_PARENTHESIS . L_BRACE statements R_BRACE

    L_BRACE         shift and go to state 175


state 175

    (61) statement -> FOR L_PARENTHESIS NAME EQUALS expression TO expression COMMA STEP EQUALS expression R_PARENTHESIS L_BRACE . statements R_BRACE
    (1) statements -> . statements statement
    (2) statements -> . statement
    (3) statement -> . assignement
    (4) statement -> . print
    (55) statement -> . if
    (56) statement -> . if elifs
    (57) statement -> . if elifs else
    (58) statement -> . if else
    (59) statement -> . loop_while
    (61) statement -> . FOR L_PARENTHESIS NAME EQUALS expression TO expression COMMA STEP EQUALS expression R_PARENTHESIS L_BRACE statements R_BRACE
    (62) statement -> . FOR L_PARENTHESIS NAME EQUALS expression TO expression R_PARENTHESIS L_BRACE statements R_BRACE
    (68) statement -> . FUNCTION NAME L_BRACE statements R_BRACE
    (69) statement -> . FUNCTION NAME L_BRACE statements return R_BRACE
    (70) statement -> . FUNCTION NAME LESS parameter_list GREATER L_BRACE statements R_BRACE
    (71) statement -> . FUNCTION NAME LESS parameter_list GREATER L_BRACE statements return R_BRACE
    (72) statement -> . NAME L_PARENTHESIS argument_list R_PARENTHESIS SEMICOLON
    (73) statement -> . NAME L_PARENTHESIS R_PARENTHESIS SEMICOLON
    (5) assignement -> . NAME EQUALS expression_string SEMICOLON
    (6) assignement -> . NAME INCREMENT SEMICOLON
    (7) assignement -> . NAME DECREMENT SEMICOLON
    (24) assignement -> . array
    (35) assignement -> . change_element_array
    (11) print -> . PRINT L_PARENTHESIS expression_string R_PARENTHESIS SEMICOLON
    (54) if -> . IF L_PARENTHESIS booleans R_PARENTHESIS L_BRACE statements R_BRACE
    (60) loop_while -> . WHILE booleans L_BRACE statements R_BRACE
    (25) array -> . NAME EQUALS L_BRACKET R_BRACKET SEMICOLON
    (26) array -> . NAME EQUALS array_content SEMICOLON
    (36) change_element_array -> . NAME array_index EQUALS element SEMICOLON
    (37) change_element_array -> . NAME array_index array_index EQUALS element SEMICOLON

    FOR             shift and go to state 7
    FUNCTION        shift and go to state 9
    NAME            shift and go to state 8
    PRINT           shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 14

    statements                     shift and go to state 176
    statement                      shift and go to state 2
    assignement                    shift and go to state 3
    print                          shift and go to state 4
    if                             shift and go to state 5
    loop_while                     shift and go to state 6
    array                          shift and go to state 10
    change_element_array           shift and go to state 11

state 176

    (61) statement -> FOR L_PARENTHESIS NAME EQUALS expression TO expression COMMA STEP EQUALS expression R_PARENTHESIS L_BRACE statements . R_BRACE
    (1) statements -> statements . statement
    (3) statement -> . assignement
    (4) statement -> . print
    (55) statement -> . if
    (56) statement -> . if elifs
    (57) statement -> . if elifs else
    (58) statement -> . if else
    (59) statement -> . loop_while
    (61) statement -> . FOR L_PARENTHESIS NAME EQUALS expression TO expression COMMA STEP EQUALS expression R_PARENTHESIS L_BRACE statements R_BRACE
    (62) statement -> . FOR L_PARENTHESIS NAME EQUALS expression TO expression R_PARENTHESIS L_BRACE statements R_BRACE
    (68) statement -> . FUNCTION NAME L_BRACE statements R_BRACE
    (69) statement -> . FUNCTION NAME L_BRACE statements return R_BRACE
    (70) statement -> . FUNCTION NAME LESS parameter_list GREATER L_BRACE statements R_BRACE
    (71) statement -> . FUNCTION NAME LESS parameter_list GREATER L_BRACE statements return R_BRACE
    (72) statement -> . NAME L_PARENTHESIS argument_list R_PARENTHESIS SEMICOLON
    (73) statement -> . NAME L_PARENTHESIS R_PARENTHESIS SEMICOLON
    (5) assignement -> . NAME EQUALS expression_string SEMICOLON
    (6) assignement -> . NAME INCREMENT SEMICOLON
    (7) assignement -> . NAME DECREMENT SEMICOLON
    (24) assignement -> . array
    (35) assignement -> . change_element_array
    (11) print -> . PRINT L_PARENTHESIS expression_string R_PARENTHESIS SEMICOLON
    (54) if -> . IF L_PARENTHESIS booleans R_PARENTHESIS L_BRACE statements R_BRACE
    (60) loop_while -> . WHILE booleans L_BRACE statements R_BRACE
    (25) array -> . NAME EQUALS L_BRACKET R_BRACKET SEMICOLON
    (26) array -> . NAME EQUALS array_content SEMICOLON
    (36) change_element_array -> . NAME array_index EQUALS element SEMICOLON
    (37) change_element_array -> . NAME array_index array_index EQUALS element SEMICOLON

    R_BRACE         shift and go to state 177
    FOR             shift and go to state 7
    FUNCTION        shift and go to state 9
    NAME            shift and go to state 8
    PRINT           shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 14

    statement                      shift and go to state 15
    assignement                    shift and go to state 3
    print                          shift and go to state 4
    if                             shift and go to state 5
    loop_while                     shift and go to state 6
    array                          shift and go to state 10
    change_element_array           shift and go to state 11

state 177

    (61) statement -> FOR L_PARENTHESIS NAME EQUALS expression TO expression COMMA STEP EQUALS expression R_PARENTHESIS L_BRACE statements R_BRACE .

    FOR             reduce using rule 61 (statement -> FOR L_PARENTHESIS NAME EQUALS expression TO expression COMMA STEP EQUALS expression R_PARENTHESIS L_BRACE statements R_BRACE .)
    FUNCTION        reduce using rule 61 (statement -> FOR L_PARENTHESIS NAME EQUALS expression TO expression COMMA STEP EQUALS expression R_PARENTHESIS L_BRACE statements R_BRACE .)
    NAME            reduce using rule 61 (statement -> FOR L_PARENTHESIS NAME EQUALS expression TO expression COMMA STEP EQUALS expression R_PARENTHESIS L_BRACE statements R_BRACE .)
    PRINT           reduce using rule 61 (statement -> FOR L_PARENTHESIS NAME EQUALS expression TO expression COMMA STEP EQUALS expression R_PARENTHESIS L_BRACE statements R_BRACE .)
    IF              reduce using rule 61 (statement -> FOR L_PARENTHESIS NAME EQUALS expression TO expression COMMA STEP EQUALS expression R_PARENTHESIS L_BRACE statements R_BRACE .)
    WHILE           reduce using rule 61 (statement -> FOR L_PARENTHESIS NAME EQUALS expression TO expression COMMA STEP EQUALS expression R_PARENTHESIS L_BRACE statements R_BRACE .)
    $end            reduce using rule 61 (statement -> FOR L_PARENTHESIS NAME EQUALS expression TO expression COMMA STEP EQUALS expression R_PARENTHESIS L_BRACE statements R_BRACE .)
    R_BRACE         reduce using rule 61 (statement -> FOR L_PARENTHESIS NAME EQUALS expression TO expression COMMA STEP EQUALS expression R_PARENTHESIS L_BRACE statements R_BRACE .)
    RETURN          reduce using rule 61 (statement -> FOR L_PARENTHESIS NAME EQUALS expression TO expression COMMA STEP EQUALS expression R_PARENTHESIS L_BRACE statements R_BRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for EQUAL in state 116 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 116 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 116 resolved as shift
WARNING: shift/reduce conflict for LESS in state 116 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 116 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 116 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 117 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 117 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 117 resolved as shift
WARNING: shift/reduce conflict for LESS in state 117 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 117 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 117 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 118 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 118 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 118 resolved as shift
WARNING: shift/reduce conflict for LESS in state 118 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 118 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 118 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 119 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 119 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 119 resolved as shift
WARNING: shift/reduce conflict for LESS in state 119 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 119 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 119 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 120 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 120 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 120 resolved as shift
WARNING: shift/reduce conflict for LESS in state 120 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 120 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 120 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 121 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 121 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 121 resolved as shift
WARNING: shift/reduce conflict for LESS in state 121 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 121 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 121 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 126 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 126 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 126 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 126 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 126 resolved as shift
